{"ast":null,"code":"import _slicedToArray from \"D:/Learn/react/SouqApp/spa/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"multiple\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from './utils';\nimport useSelect from '../useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from './SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from './selectUnstyledClasses';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderValue(selectedOptions) {\n  var _selectedOptions$labe;\n\n  if (Array.isArray(selectedOptions)) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: selectedOptions.map(function (o) {\n        return o.label;\n      }).join(', ')\n    });\n  }\n\n  return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : '';\n}\n\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n\n    if (selectedOption.every(function (o) {\n      return typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean';\n    })) {\n      return selectedOption.map(function (o) {\n        return String(o.value);\n      });\n    }\n\n    return JSON.stringify(selectedOption.map(function (o) {\n      return o.value;\n    }));\n  }\n\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n\n  return JSON.stringify(selectedOption.value);\n}\n\nfunction useUtilityClasses(ownerState) {\n  var active = ownerState.active,\n      disabled = ownerState.disabled,\n      open = ownerState.open,\n      focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSelectUnstyledUtilityClass));\n}\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [SelectUnstyled API](https://mui.com/base/react-select/components-api/#select-unstyled)\n */\n\n\nvar SelectUnstyled = /*#__PURE__*/React.forwardRef(function SelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n\n  var autoFocus = props.autoFocus,\n      children = props.children,\n      component = props.component,\n      defaultValue = props.defaultValue,\n      _props$defaultListbox = props.defaultListboxOpen,\n      defaultListboxOpen = _props$defaultListbox === void 0 ? false : _props$defaultListbox,\n      disabledProp = props.disabled,\n      _props$getSerializedV = props.getSerializedValue,\n      getSerializedValue = _props$getSerializedV === void 0 ? defaultFormValueProvider : _props$getSerializedV,\n      listboxId = props.listboxId,\n      listboxOpenProp = props.listboxOpen,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      name = props.name,\n      onChange = props.onChange,\n      onListboxOpenChange = props.onListboxOpenChange,\n      _props$optionStringif = props.optionStringifier,\n      optionStringifier = _props$optionStringif === void 0 ? defaultOptionStringifier : _props$optionStringif,\n      renderValueProp = props.renderValue,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      valueProp = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      groupedOptions = _React$useState2[0],\n      setGroupedOptions = _React$useState2[1];\n\n  var options = React.useMemo(function () {\n    return flattenOptionGroups(groupedOptions);\n  }, [groupedOptions]);\n\n  var _useControlled = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'SelectUnstyled',\n    state: 'listboxOpen'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      listboxOpen = _useControlled2[0],\n      setListboxOpen = _useControlled2[1];\n\n  React.useEffect(function () {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buttonDefined = _React$useState4[0],\n      setButtonDefined = _React$useState4[1];\n\n  var buttonRef = React.useRef(null);\n  var listboxRef = React.useRef(null);\n  var Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  var ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  var Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  var handleButtonRefChange = React.useCallback(function (element) {\n    setButtonDefined(element != null);\n  }, []);\n  var handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(function () {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  var handleOpenChange = React.useCallback(function (isOpen) {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  }, [setListboxOpen, onListboxOpenChange]);\n\n  var _useSelect = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue: defaultValue,\n    disabled: disabledProp,\n    listboxId: listboxId,\n    multiple: multiple,\n    open: listboxOpen,\n    onChange: onChange,\n    onOpenChange: handleOpenChange,\n    options: options,\n    optionStringifier: optionStringifier,\n    value: valueProp\n  }),\n      buttonActive = _useSelect.buttonActive,\n      buttonFocusVisible = _useSelect.buttonFocusVisible,\n      disabled = _useSelect.disabled,\n      getButtonProps = _useSelect.getButtonProps,\n      getListboxProps = _useSelect.getListboxProps,\n      contextValue = _useSelect.contextValue,\n      value = _useSelect.value;\n\n  var ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen: defaultListboxOpen,\n    disabled: disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    multiple: multiple,\n    renderValue: renderValue,\n    value: value\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var selectedOption = React.useMemo(function () {\n    var _options$find;\n\n    if (multiple) {\n      if (value == null) {\n        return [];\n      }\n\n      return options.filter(function (o) {\n        return value.includes(o.value);\n      });\n    }\n\n    return (_options$find = options.find(function (o) {\n      return value === o.value;\n    })) != null ? _options$find : null;\n  }, [options, value, multiple]);\n  var buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState: ownerState,\n    className: classes.listbox\n  });\n  var popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState: ownerState,\n    className: classes.popper\n  });\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOption)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: contextValue,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOption)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * If `true`, selecting multiple values is allowed.\n   *\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SelectUnstyled;","map":{"version":3,"sources":["D:/Learn/react/SouqApp/SPA/node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/SelectUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useForkRef","useForkRef","unstable_useControlled","useControlled","flattenOptionGroups","getOptionsFromChildren","useSelect","useSlotProps","PopperUnstyled","SelectUnstyledContext","composeClasses","getSelectUnstyledUtilityClass","defaultOptionStringifier","useClassNamesOverride","jsx","_jsx","jsxs","_jsxs","defaultRenderValue","selectedOptions","_selectedOptions$labe","Array","isArray","Fragment","children","map","o","label","join","defaultFormValueProvider","selectedOption","length","every","value","String","JSON","stringify","useUtilityClasses","ownerState","active","disabled","open","focusVisible","slots","root","listbox","popper","SelectUnstyled","forwardRef","props","forwardedRef","_ref","_slots$listbox","_slots$popper","autoFocus","component","defaultValue","defaultListboxOpen","disabledProp","getSerializedValue","listboxId","listboxOpenProp","listboxOpen","multiple","name","onChange","onListboxOpenChange","optionStringifier","renderValueProp","renderValue","slotProps","valueProp","other","useState","groupedOptions","setGroupedOptions","options","useMemo","controlled","default","state","setListboxOpen","useEffect","buttonDefined","setButtonDefined","buttonRef","useRef","listboxRef","Button","ListboxRoot","Popper","handleButtonRefChange","useCallback","element","handleButtonRef","current","focus","handleOpenChange","isOpen","onOpenChange","buttonActive","buttonFocusVisible","getButtonProps","getListboxProps","contextValue","classes","_options$find","filter","includes","find","buttonProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","listboxProps","additionalProps","ref","popperProps","anchorEl","disablePortal","placement","role","undefined","Provider","type","process","env","NODE_ENV","propTypes","bool","node","any","func","string","shape","oneOfType","object"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,WAA1B,EAAuC,cAAvC,EAAuD,oBAAvD,EAA6E,UAA7E,EAAyF,oBAAzF,EAA+G,WAA/G,EAA4H,aAA5H,EAA2I,UAA3I,EAAuJ,MAAvJ,EAA+J,UAA/J,EAA2K,qBAA3K,EAAkM,mBAAlM,EAAuN,aAAvN,EAAsO,WAAtO,EAAmP,OAAnP,EAA4P,OAA5P,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,EAA4CC,sBAAsB,IAAIC,aAAtE,QAA2F,YAA3F;AACA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,SAA5D;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAASC,6BAAT,QAA8C,yBAA9C;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;;AACA,SAASC,kBAAT,CAA4BC,eAA5B,EAA6C;AAC3C,MAAIC,qBAAJ;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,eAAd,CAAJ,EAAoC;AAClC,WAAO,aAAaJ,IAAI,CAACjB,KAAK,CAACyB,QAAP,EAAiB;AACvCC,MAAAA,QAAQ,EAAEL,eAAe,CAACM,GAAhB,CAAoB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,KAAN;AAAA,OAArB,EAAkCC,IAAlC,CAAuC,IAAvC;AAD6B,KAAjB,CAAxB;AAGD;;AACD,SAAO,CAACR,qBAAqB,GAAGD,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAACQ,KAA5E,KAAsF,IAAtF,GAA6FP,qBAA7F,GAAqH,EAA5H;AACD;;AACD,SAASS,wBAAT,CAAkCC,cAAlC,EAAkD;AAChD,MAAIT,KAAK,CAACC,OAAN,CAAcQ,cAAd,CAAJ,EAAmC;AACjC,QAAIA,cAAc,CAACC,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAO,EAAP;AACD;;AACD,QAAID,cAAc,CAACE,KAAf,CAAqB,UAAAN,CAAC;AAAA,aAAI,OAAOA,CAAC,CAACO,KAAT,KAAmB,QAAnB,IAA+B,OAAOP,CAAC,CAACO,KAAT,KAAmB,QAAlD,IAA8D,OAAOP,CAAC,CAACO,KAAT,KAAmB,SAArF;AAAA,KAAtB,CAAJ,EAA2H;AACzH,aAAOH,cAAc,CAACL,GAAf,CAAmB,UAAAC,CAAC;AAAA,eAAIQ,MAAM,CAACR,CAAC,CAACO,KAAH,CAAV;AAAA,OAApB,CAAP;AACD;;AACD,WAAOE,IAAI,CAACC,SAAL,CAAeN,cAAc,CAACL,GAAf,CAAmB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACO,KAAN;AAAA,KAApB,CAAf,CAAP;AACD;;AACD,MAAI,CAACH,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACG,KAAlD,KAA4D,IAAhE,EAAsE;AACpE,WAAO,EAAP;AACD;;AACD,MAAI,OAAOH,cAAc,CAACG,KAAtB,KAAgC,QAAhC,IAA4C,OAAOH,cAAc,CAACG,KAAtB,KAAgC,QAAhF,EAA0F;AACxF,WAAOH,cAAc,CAACG,KAAtB;AACD;;AACD,SAAOE,IAAI,CAACC,SAAL,CAAeN,cAAc,CAACG,KAA9B,CAAP;AACD;;AACD,SAASI,iBAAT,CAA2BC,UAA3B,EAAuC;AACrC,MACEC,MADF,GAKID,UALJ,CACEC,MADF;AAAA,MAEEC,QAFF,GAKIF,UALJ,CAEEE,QAFF;AAAA,MAGEC,IAHF,GAKIH,UALJ,CAGEG,IAHF;AAAA,MAIEC,YAJF,GAKIJ,UALJ,CAIEI,YAJF;AAMA,MAAMC,KAAK,GAAG;AACZC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAASJ,QAAQ,IAAI,UAArB,EAAiCE,YAAY,IAAI,cAAjD,EAAiEH,MAAM,IAAI,QAA3E,EAAqFE,IAAI,IAAI,UAA7F,CADM;AAEZI,IAAAA,OAAO,EAAE,CAAC,SAAD,EAAYL,QAAQ,IAAI,UAAxB,CAFG;AAGZM,IAAAA,MAAM,EAAE,CAAC,QAAD;AAHI,GAAd;AAKA,SAAOpC,cAAc,CAACiC,KAAD,EAAQ9B,qBAAqB,CAACF,6BAAD,CAA7B,CAArB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMoC,cAAc,GAAG,aAAajD,KAAK,CAACkD,UAAN,CAAiB,SAASD,cAAT,CAAwBE,KAAxB,EAA+BC,YAA/B,EAA6C;AAChG,MAAIC,IAAJ,EAAUC,cAAV,EAA0BC,aAA1B;;AACA,MACIC,SADJ,GAmBML,KAnBN,CACIK,SADJ;AAAA,MAEI9B,QAFJ,GAmBMyB,KAnBN,CAEIzB,QAFJ;AAAA,MAGI+B,SAHJ,GAmBMN,KAnBN,CAGIM,SAHJ;AAAA,MAIIC,YAJJ,GAmBMP,KAnBN,CAIIO,YAJJ;AAAA,8BAmBMP,KAnBN,CAKIQ,kBALJ;AAAA,MAKIA,kBALJ,sCAKyB,KALzB;AAAA,MAMcC,YANd,GAmBMT,KAnBN,CAMIT,QANJ;AAAA,8BAmBMS,KAnBN,CAOIU,kBAPJ;AAAA,MAOIA,kBAPJ,sCAOyB9B,wBAPzB;AAAA,MAQI+B,SARJ,GAmBMX,KAnBN,CAQIW,SARJ;AAAA,MASiBC,eATjB,GAmBMZ,KAnBN,CASIa,WATJ;AAAA,wBAmBMb,KAnBN,CAUIc,QAVJ;AAAA,MAUIA,QAVJ,gCAUe,KAVf;AAAA,MAWIC,IAXJ,GAmBMf,KAnBN,CAWIe,IAXJ;AAAA,MAYIC,QAZJ,GAmBMhB,KAnBN,CAYIgB,QAZJ;AAAA,MAaIC,mBAbJ,GAmBMjB,KAnBN,CAaIiB,mBAbJ;AAAA,8BAmBMjB,KAnBN,CAcIkB,iBAdJ;AAAA,MAcIA,iBAdJ,sCAcwBvD,wBAdxB;AAAA,MAeiBwD,eAfjB,GAmBMnB,KAnBN,CAeIoB,WAfJ;AAAA,yBAmBMpB,KAnBN,CAgBIqB,SAhBJ;AAAA,MAgBIA,SAhBJ,iCAgBgB,EAhBhB;AAAA,qBAmBMrB,KAnBN,CAiBIN,KAjBJ;AAAA,MAiBIA,KAjBJ,6BAiBY,EAjBZ;AAAA,MAkBW4B,SAlBX,GAmBMtB,KAnBN,CAkBIhB,KAlBJ;AAAA,MAoBEuC,KApBF,GAoBU5E,6BAA6B,CAACqD,KAAD,EAAQpD,SAAR,CApBvC;;AAqBA,MAAMwE,WAAW,GAAGD,eAAe,IAAI,IAAnB,GAA0BA,eAA1B,GAA4ClD,kBAAhE;;AACA,wBAA4CpB,KAAK,CAAC2E,QAAN,CAAe,EAAf,CAA5C;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,MAAMC,OAAO,GAAG9E,KAAK,CAAC+E,OAAN,CAAc;AAAA,WAAMzE,mBAAmB,CAACsE,cAAD,CAAzB;AAAA,GAAd,EAAyD,CAACA,cAAD,CAAzD,CAAhB;;AACA,uBAAsCvE,aAAa,CAAC;AAClD2E,IAAAA,UAAU,EAAEjB,eADsC;AAElDkB,IAAAA,OAAO,EAAEtB,kBAFyC;AAGlDO,IAAAA,IAAI,EAAE,gBAH4C;AAIlDgB,IAAAA,KAAK,EAAE;AAJ2C,GAAD,CAAnD;AAAA;AAAA,MAAOlB,WAAP;AAAA,MAAoBmB,cAApB;;AAMAnF,EAAAA,KAAK,CAACoF,SAAN,CAAgB,YAAM;AACpBP,IAAAA,iBAAiB,CAACtE,sBAAsB,CAACmB,QAAD,CAAvB,CAAjB;AACD,GAFD,EAEG,CAACA,QAAD,CAFH;;AAGA,yBAA0C1B,KAAK,CAAC2E,QAAN,CAAe,KAAf,CAA1C;AAAA;AAAA,MAAOU,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,MAAMC,SAAS,GAAGvF,KAAK,CAACwF,MAAN,CAAa,IAAb,CAAlB;AACA,MAAMC,UAAU,GAAGzF,KAAK,CAACwF,MAAN,CAAa,IAAb,CAAnB;AACA,MAAME,MAAM,GAAG,CAACrC,IAAI,GAAGI,SAAS,IAAI,IAAb,GAAoBA,SAApB,GAAgCZ,KAAK,CAACC,IAA9C,KAAuD,IAAvD,GAA8DO,IAA9D,GAAqE,QAApF;AACA,MAAMsC,WAAW,GAAG,CAACrC,cAAc,GAAGT,KAAK,CAACE,OAAxB,KAAoC,IAApC,GAA2CO,cAA3C,GAA4D,IAAhF;AACA,MAAMsC,MAAM,GAAG,CAACrC,aAAa,GAAGV,KAAK,CAACG,MAAvB,KAAkC,IAAlC,GAAyCO,aAAzC,GAAyD7C,cAAxE;AACA,MAAMmF,qBAAqB,GAAG7F,KAAK,CAAC8F,WAAN,CAAkB,UAAAC,OAAO,EAAI;AACzDT,IAAAA,gBAAgB,CAACS,OAAO,IAAI,IAAZ,CAAhB;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAGA,MAAMC,eAAe,GAAG7F,UAAU,CAACiD,YAAD,EAAemC,SAAf,EAA0BM,qBAA1B,CAAlC;AACA7F,EAAAA,KAAK,CAACoF,SAAN,CAAgB,YAAM;AACpB,QAAI5B,SAAJ,EAAe;AACb+B,MAAAA,SAAS,CAACU,OAAV,CAAkBC,KAAlB;AACD;AACF,GAJD,EAIG,CAAC1C,SAAD,CAJH;AAKA,MAAM2C,gBAAgB,GAAGnG,KAAK,CAAC8F,WAAN,CAAkB,UAAAM,MAAM,EAAI;AACnDjB,IAAAA,cAAc,CAACiB,MAAD,CAAd;AACAhC,IAAAA,mBAAmB,IAAI,IAAvB,GAA8B,KAAK,CAAnC,GAAuCA,mBAAmB,CAACgC,MAAD,CAA1D;AACD,GAHwB,EAGtB,CAACjB,cAAD,EAAiBf,mBAAjB,CAHsB,CAAzB;;AAIA,mBAQI5D,SAAS,CAAC;AACZ+E,IAAAA,SAAS,EAAES,eADC;AAEZtC,IAAAA,YAAY,EAAZA,YAFY;AAGZhB,IAAAA,QAAQ,EAAEkB,YAHE;AAIZE,IAAAA,SAAS,EAATA,SAJY;AAKZG,IAAAA,QAAQ,EAARA,QALY;AAMZtB,IAAAA,IAAI,EAAEqB,WANM;AAOZG,IAAAA,QAAQ,EAARA,QAPY;AAQZkC,IAAAA,YAAY,EAAEF,gBARF;AASZrB,IAAAA,OAAO,EAAPA,OATY;AAUZT,IAAAA,iBAAiB,EAAjBA,iBAVY;AAWZlC,IAAAA,KAAK,EAAEsC;AAXK,GAAD,CARb;AAAA,MACE6B,YADF,cACEA,YADF;AAAA,MAEEC,kBAFF,cAEEA,kBAFF;AAAA,MAGE7D,QAHF,cAGEA,QAHF;AAAA,MAIE8D,cAJF,cAIEA,cAJF;AAAA,MAKEC,eALF,cAKEA,eALF;AAAA,MAMEC,YANF,cAMEA,YANF;AAAA,MAOEvE,KAPF,cAOEA,KAPF;;AAqBA,MAAMK,UAAU,GAAG3C,QAAQ,CAAC,EAAD,EAAKsD,KAAL,EAAY;AACrCV,IAAAA,MAAM,EAAE6D,YAD6B;AAErC3C,IAAAA,kBAAkB,EAAlBA,kBAFqC;AAGrCjB,IAAAA,QAAQ,EAARA,QAHqC;AAIrCE,IAAAA,YAAY,EAAE2D,kBAJuB;AAKrC5D,IAAAA,IAAI,EAAEqB,WAL+B;AAMrCC,IAAAA,QAAQ,EAARA,QANqC;AAOrCM,IAAAA,WAAW,EAAXA,WAPqC;AAQrCpC,IAAAA,KAAK,EAALA;AARqC,GAAZ,CAA3B;;AAUA,MAAMwE,OAAO,GAAGpE,iBAAiB,CAACC,UAAD,CAAjC;AACA,MAAMR,cAAc,GAAGhC,KAAK,CAAC+E,OAAN,CAAc,YAAM;AACzC,QAAI6B,aAAJ;;AACA,QAAI3C,QAAJ,EAAc;AACZ,UAAI9B,KAAK,IAAI,IAAb,EAAmB;AACjB,eAAO,EAAP;AACD;;AACD,aAAO2C,OAAO,CAAC+B,MAAR,CAAe,UAAAjF,CAAC;AAAA,eAAIO,KAAK,CAAC2E,QAAN,CAAelF,CAAC,CAACO,KAAjB,CAAJ;AAAA,OAAhB,CAAP;AACD;;AACD,WAAO,CAACyE,aAAa,GAAG9B,OAAO,CAACiC,IAAR,CAAa,UAAAnF,CAAC;AAAA,aAAIO,KAAK,KAAKP,CAAC,CAACO,KAAhB;AAAA,KAAd,CAAjB,KAA0D,IAA1D,GAAiEyE,aAAjE,GAAiF,IAAxF;AACD,GATsB,EASpB,CAAC9B,OAAD,EAAU3C,KAAV,EAAiB8B,QAAjB,CAToB,CAAvB;AAUA,MAAM+C,WAAW,GAAGvG,YAAY,CAAC;AAC/BwG,IAAAA,WAAW,EAAEvB,MADkB;AAE/BwB,IAAAA,YAAY,EAAEV,cAFiB;AAG/BW,IAAAA,iBAAiB,EAAE3C,SAAS,CAAC1B,IAHE;AAI/BsE,IAAAA,sBAAsB,EAAE1C,KAJO;AAK/BlC,IAAAA,UAAU,EAAVA,UAL+B;AAM/B6E,IAAAA,SAAS,EAAEV,OAAO,CAAC7D;AANY,GAAD,CAAhC;AAQA,MAAMwE,YAAY,GAAG7G,YAAY,CAAC;AAChCwG,IAAAA,WAAW,EAAEtB,WADmB;AAEhCuB,IAAAA,YAAY,EAAET,eAFkB;AAGhCU,IAAAA,iBAAiB,EAAE3C,SAAS,CAACzB,OAHG;AAIhCwE,IAAAA,eAAe,EAAE;AACfC,MAAAA,GAAG,EAAE/B;AADU,KAJe;AAOhCjD,IAAAA,UAAU,EAAVA,UAPgC;AAQhC6E,IAAAA,SAAS,EAAEV,OAAO,CAAC5D;AARa,GAAD,CAAjC;AAUA,MAAM0E,WAAW,GAAGhH,YAAY,CAAC;AAC/BwG,IAAAA,WAAW,EAAErB,MADkB;AAE/BuB,IAAAA,iBAAiB,EAAE3C,SAAS,CAACxB,MAFE;AAG/BuE,IAAAA,eAAe,EAAE;AACfG,MAAAA,QAAQ,EAAEnC,SAAS,CAACU,OADL;AAEf0B,MAAAA,aAAa,EAAE,IAFA;AAGfhF,MAAAA,IAAI,EAAEqB,WAHS;AAIf4D,MAAAA,SAAS,EAAE,cAJI;AAKfC,MAAAA,IAAI,EAAEC;AALS,KAHc;AAU/BtF,IAAAA,UAAU,EAAVA,UAV+B;AAW/B6E,IAAAA,SAAS,EAAEV,OAAO,CAAC3D;AAXY,GAAD,CAAhC;AAaA,SAAO,aAAa7B,KAAK,CAACnB,KAAK,CAACyB,QAAP,EAAiB;AACxCC,IAAAA,QAAQ,EAAE,CAAC,aAAaT,IAAI,CAACyE,MAAD,EAAS7F,QAAQ,CAAC,EAAD,EAAKmH,WAAL,EAAkB;AAC7DtF,MAAAA,QAAQ,EAAE6C,WAAW,CAACvC,cAAD;AADwC,KAAlB,CAAjB,CAAlB,EAELqD,aAAa,IAAI,aAAapE,IAAI,CAAC2E,MAAD,EAAS/F,QAAQ,CAAC,EAAD,EAAK4H,WAAL,EAAkB;AACxE/F,MAAAA,QAAQ,EAAE,aAAaT,IAAI,CAAC0E,WAAD,EAAc9F,QAAQ,CAAC,EAAD,EAAKyH,YAAL,EAAmB;AAClE5F,QAAAA,QAAQ,EAAE,aAAaT,IAAI,CAACN,qBAAqB,CAACoH,QAAvB,EAAiC;AAC1D5F,UAAAA,KAAK,EAAEuE,YADmD;AAE1DhF,UAAAA,QAAQ,EAAEA;AAFgD,SAAjC;AADuC,OAAnB,CAAtB;AAD6C,KAAlB,CAAjB,CAF7B,EASLwC,IAAI,IAAI,aAAajD,IAAI,CAAC,OAAD,EAAU;AACtC+G,MAAAA,IAAI,EAAE,QADgC;AAEtC9D,MAAAA,IAAI,EAAEA,IAFgC;AAGtC/B,MAAAA,KAAK,EAAE0B,kBAAkB,CAAC7B,cAAD;AAHa,KAAV,CATpB;AAD8B,GAAjB,CAAzB;AAgBD,CA/ImC,CAApC;AAgJAiG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClF,cAAc,CAACmF;AAAU;AAAzB,EAAkD;AACxF;AACA;AACA;AACA;;AACA;AACF;AACA;AACA;AACE5E,EAAAA,SAAS,EAAEvD,SAAS,CAACoI,IATmE;;AAUxF;AACF;AACA;AACE3G,EAAAA,QAAQ,EAAEzB,SAAS,CAACqI,IAboE;;AAcxF;AACF;AACA;AACA;AACE7E,EAAAA,SAAS,EAAExD,SAAS,CAACgH,WAlBmE;;AAmBxF;AACF;AACA;AACA;AACEtD,EAAAA,kBAAkB,EAAE1D,SAAS,CAACoI,IAvB0D;;AAwBxF;AACF;AACA;AACE3E,EAAAA,YAAY,EAAEzD,SAAS,CAACsI,GA3BgE;;AA4BxF;AACF;AACA;AACA;AACE7F,EAAAA,QAAQ,EAAEzC,SAAS,CAACoI,IAhCoE;;AAiCxF;AACF;AACA;AACA;AACA;AACExE,EAAAA,kBAAkB,EAAE5D,SAAS,CAACuI,IAtC0D;;AAuCxF;AACF;AACA;AACA;AACE1E,EAAAA,SAAS,EAAE7D,SAAS,CAACwI,MA3CmE;;AA4CxF;AACF;AACA;AACA;AACEzE,EAAAA,WAAW,EAAE/D,SAAS,CAACoI,IAhDiE;;AAiDxF;AACF;AACA;AACA;AACA;AACEpE,EAAAA,QAAQ,EAAEhE,SAAS,CAACoI,IAtDoE;;AAuDxF;AACF;AACA;AACA;AACEnE,EAAAA,IAAI,EAAEjE,SAAS,CAACwI,MA3DwE;;AA4DxF;AACF;AACA;AACEtE,EAAAA,QAAQ,EAAElE,SAAS,CAACuI,IA/DoE;;AAgExF;AACF;AACA;AACA;AACEpE,EAAAA,mBAAmB,EAAEnE,SAAS,CAACuI,IApEyD;;AAqExF;AACF;AACA;AACA;AACA;AACA;AACA;AACEnE,EAAAA,iBAAiB,EAAEpE,SAAS,CAACuI,IA5E2D;;AA6ExF;AACF;AACA;AACEjE,EAAAA,WAAW,EAAEtE,SAAS,CAACuI,IAhFiE;;AAiFxF;AACF;AACA;AACA;AACEhE,EAAAA,SAAS,EAAEvE,SAAS,CAACyI,KAAV,CAAgB;AACzB3F,IAAAA,OAAO,EAAE9C,SAAS,CAAC0I,SAAV,CAAoB,CAAC1I,SAAS,CAACuI,IAAX,EAAiBvI,SAAS,CAAC2I,MAA3B,CAApB,CADgB;AAEzB5F,IAAAA,MAAM,EAAE/C,SAAS,CAAC0I,SAAV,CAAoB,CAAC1I,SAAS,CAACuI,IAAX,EAAiBvI,SAAS,CAAC2I,MAA3B,CAApB,CAFiB;AAGzB9F,IAAAA,IAAI,EAAE7C,SAAS,CAAC0I,SAAV,CAAoB,CAAC1I,SAAS,CAACuI,IAAX,EAAiBvI,SAAS,CAAC2I,MAA3B,CAApB;AAHmB,GAAhB,CArF6E;;AA0FxF;AACF;AACA;AACA;AACA;AACE/F,EAAAA,KAAK,EAAE5C;AAAU;AAAD,GAAuCyI,KAAhD,CAAsD;AAC3D3F,IAAAA,OAAO,EAAE9C,SAAS,CAACgH,WADwC;AAE3DjE,IAAAA,MAAM,EAAE/C,SAAS,CAACgH,WAFyC;AAG3DnE,IAAAA,IAAI,EAAE7C,SAAS,CAACgH;AAH2C,GAAtD,CA/FiF;;AAoGxF;AACF;AACA;AACA;AACE9E,EAAAA,KAAK,EAAElC,SAAS,CAACsI;AAxGuE,CAA1F,GAyGI,KAAK,CAzGT;AA0GA,eAAetF,cAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"component\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"multiple\", \"name\", \"onChange\", \"onListboxOpenChange\", \"optionStringifier\", \"renderValue\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from './utils';\nimport useSelect from '../useSelect';\nimport { useSlotProps } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from './SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from './selectUnstyledClasses';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction defaultRenderValue(selectedOptions) {\n  var _selectedOptions$labe;\n  if (Array.isArray(selectedOptions)) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: selectedOptions.map(o => o.label).join(', ')\n    });\n  }\n  return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : '';\n}\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    if (selectedOption.every(o => typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean')) {\n      return selectedOption.map(o => String(o.value));\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSelectUnstyledUtilityClass));\n}\n\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/)\n *\n * API:\n *\n * - [SelectUnstyled API](https://mui.com/base/react-select/components-api/#select-unstyled)\n */\nconst SelectUnstyled = /*#__PURE__*/React.forwardRef(function SelectUnstyled(props, forwardedRef) {\n  var _ref, _slots$listbox, _slots$popper;\n  const {\n      autoFocus,\n      children,\n      component,\n      defaultValue,\n      defaultListboxOpen = false,\n      disabled: disabledProp,\n      getSerializedValue = defaultFormValueProvider,\n      listboxId,\n      listboxOpen: listboxOpenProp,\n      multiple = false,\n      name,\n      onChange,\n      onListboxOpenChange,\n      optionStringifier = defaultOptionStringifier,\n      renderValue: renderValueProp,\n      slotProps = {},\n      slots = {},\n      value: valueProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'SelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;\n  const handleButtonRefChange = React.useCallback(element => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const handleOpenChange = React.useCallback(isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  }, [setListboxOpen, onListboxOpenChange]);\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    value\n  } = useSelect({\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple,\n    open: listboxOpen,\n    onChange,\n    onOpenChange: handleOpenChange,\n    options,\n    optionStringifier,\n    value: valueProp\n  });\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    multiple,\n    renderValue,\n    value\n  });\n  const classes = useUtilityClasses(ownerState);\n  const selectedOption = React.useMemo(() => {\n    var _options$find;\n    if (multiple) {\n      if (value == null) {\n        return [];\n      }\n      return options.filter(o => value.includes(o.value));\n    }\n    return (_options$find = options.find(o => value === o.value)) != null ? _options$find : null;\n  }, [options, value, multiple]);\n  const buttonProps = useSlotProps({\n    elementType: Button,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: Popper,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      disablePortal: true,\n      open: listboxOpen,\n      placement: 'bottom-start',\n      role: undefined\n    },\n    ownerState,\n    className: classes.popper\n  });\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOption)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: contextValue,\n          children: children\n        })\n      }))\n    })), name && /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: getSerializedValue(selectedOption)\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectUnstyled.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: PropTypes.func,\n  /**\n   * `id` attribute of the listbox element.\n   * Also used to derive the `id` attributes of options.\n   */\n  listboxId: PropTypes.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n  /**\n   * If `true`, selecting multiple values is allowed.\n   *\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  optionStringifier: PropTypes.func,\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    listbox: PropTypes.elementType,\n    popper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SelectUnstyled;"]},"metadata":{},"sourceType":"module"}