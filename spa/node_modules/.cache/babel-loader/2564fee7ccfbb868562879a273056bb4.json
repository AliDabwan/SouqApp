{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport { PaginatedResponse } from \"../models/PaginationData\";\nimport { SouqStore } from \"../store/configureStore\";\n\nconst sleep = () => new Promise(resolve => setTimeout(resolve, 500));\n\naxios.defaults.baseURL = 'http://localhost:5000/api/';\naxios.defaults.withCredentials = true;\naxios.interceptors.request.use(config => {\n  var _SouqStore$getState$a;\n\n  const token = (_SouqStore$getState$a = SouqStore.getState().account.user) === null || _SouqStore$getState$a === void 0 ? void 0 : _SouqStore$getState$a.token;\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\naxios.interceptors.response.use(async response => {\n  await sleep();\n  const pagination = response.headers['pagination'];\n\n  if (pagination) {\n    response.data = new PaginatedResponse(response.data, JSON.parse(pagination));\n    return response;\n  }\n\n  return response;\n}, error => {\n  const {\n    data,\n    status\n  } = error.response;\n\n  switch (status) {\n    case 400:\n      if (data.errors) {\n        const modelStateErrors = [];\n\n        for (const key in data.errors) {\n          if (data.errors[key]) {\n            modelStateErrors.push(data.errors[key]);\n          }\n        }\n\n        throw modelStateErrors.flat();\n      }\n\n      toast.error(data.title);\n      break;\n\n    case 401:\n      toast.error(data.title);\n      break;\n\n    case 500:\n      history.push('server-error', {\n        error: data\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error.response);\n});\n\nconst responseBody = response => response.data;\n\nconst requests = {\n  get: (url, params) => axios.get(url, {\n    params: params\n  }).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  delete: url => axios.delete(url).then(responseBody),\n  postForm: (url, data) => {\n    axios.post(url, data, {\n      headers: {\n        'Content-type': 'multipart/from-data'\n      }\n    }).then(responseBody);\n  },\n  puttForm: (url, data) => {\n    axios.put(url, data, {\n      headers: {\n        'Content-type': 'multipart/from-data'\n      }\n    }).then(responseBody);\n  }\n};\n\nconst createFormData = product => {\n  let formData = new FormData();\n\n  for (const key in product) {\n    formData.append(key, product[key]);\n  }\n\n  return formData;\n};\n\nconst Catalog = {\n  list: params => requests.get('products', params),\n  details: id => requests.get(`products/${id}`),\n  fetchFilters: () => requests.get('products/filters')\n};\nconst Errors = {\n  get400Error: () => requests.get('error/bad-request'),\n  get401Error: () => requests.get('error/unauthorized'),\n  get404Error: () => requests.get('error/not-found'),\n  getValidationError: () => requests.get('error/validation-error'),\n  get500Error: () => requests.get('error/server-error')\n};\nconst Basket = {\n  get: () => requests.get('basket'),\n  addItem: function (productId) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return requests.post(`basket?productId=${productId}&quantity=${quantity}`, {});\n  },\n  deleteItem: function (productId) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return requests.delete(`basket?productId=${productId}&quantity=${quantity}`);\n  }\n};\nconst Account = {\n  login: values => requests.post('account/login', values),\n  register: values => requests.post('account/register', values),\n  currentUser: () => requests.get('account/currentUser'),\n  fetchAddress: () => requests.get('account/savedAddress')\n};\nconst Orders = {\n  list: () => requests.get('orders'),\n  fetch: id => requests.get(`orders/${id}`),\n  create: values => requests.post('orders', values)\n};\nconst Payment = {\n  createPaymentIntent: () => requests.post('payment', {})\n};\nconst agent = {\n  Catalog,\n  Errors,\n  Basket,\n  Account,\n  Orders,\n  Payment\n};\nexport default agent;","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/app/api/agent.ts"],"names":["axios","toast","history","PaginatedResponse","SouqStore","sleep","Promise","resolve","setTimeout","defaults","baseURL","withCredentials","interceptors","request","use","config","token","getState","account","user","headers","Authorization","response","pagination","data","JSON","parse","error","status","errors","modelStateErrors","key","push","flat","title","reject","responseBody","requests","get","url","params","then","post","body","put","delete","postForm","puttForm","createFormData","product","formData","FormData","append","Catalog","list","details","id","fetchFilters","Errors","get400Error","get401Error","get404Error","getValidationError","get500Error","Basket","addItem","productId","quantity","deleteItem","Account","login","values","register","currentUser","fetchAddress","Orders","fetch","create","Payment","createPaymentIntent","agent"],"mappings":"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","sourcesContent":["import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { PaginatedResponse } from \"../models/PaginationData\";\r\nimport { SouqStore } from \"../store/configureStore\";\r\n\r\nconst sleep = () => new Promise(resolve => setTimeout(resolve, 500));\r\naxios.defaults.baseURL = 'http://localhost:5000/api/';\r\naxios.defaults.withCredentials=true;\r\n\r\naxios.interceptors.request.use(config=>{\r\n    const token=SouqStore.getState().account.user?.token;\r\n    if(token)config.headers!.Authorization=`Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    await sleep();\r\n\r\n    const pagination=response.headers['pagination'];\r\n    if(pagination){\r\n        response.data=new PaginatedResponse(response.data,JSON.parse(pagination));\r\n        return response;\r\n    }\r\n    return response\r\n}, (error: AxiosError) => {\r\n    const { data, status } = error.response!;\r\n\r\n    switch (status) {\r\n        case 400:\r\n            if (data.errors) {\r\n                const modelStateErrors: string[] = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modelStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat()\r\n            }\r\n            toast.error(data.title)\r\n            break;\r\n        case 401:\r\n            toast.error(data.title)\r\n           \r\n            break;\r\n        case 500:\r\n            history.push('server-error', { error: data })\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return Promise.reject(error.response);\r\n})\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\nconst requests = {\r\n    get: (url: string,params?:URLSearchParams) => axios.get(url,{params:params}).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    delete: (url: string) => axios.delete(url).then(responseBody),\r\n    postForm:(url:string,data:FormData)=>{\r\n        axios.post(url,data,{\r\n            headers:{'Content-type':'multipart/from-data'}\r\n        }).then(responseBody)\r\n    },\r\n    puttForm:(url:string,data:FormData)=>{\r\n        axios.put(url,data,{\r\n            headers:{'Content-type':'multipart/from-data'}\r\n        }).then(responseBody)\r\n    }\r\n}\r\nconst createFormData=(product:any)=>{\r\n    let formData=new FormData();\r\n    for (const key in product) {\r\n      \r\n        formData.append(key,product[key])\r\n    }\r\n    return formData;\r\n\r\n}\r\nconst Catalog = {\r\n    list: (params:URLSearchParams) => requests.get('products',params),\r\n    details: (id: string) => requests.get(`products/${id}`),\r\n    fetchFilters:()=>requests.get('products/filters')\r\n}\r\n \r\nconst Errors = {\r\n    get400Error: () => requests.get('error/bad-request'),\r\n    get401Error: () => requests.get('error/unauthorized'),\r\n    get404Error: () => requests.get('error/not-found'),\r\n    getValidationError: () => requests.get('error/validation-error'),\r\n    get500Error: () => requests.get('error/server-error')\r\n}\r\nconst Basket={\r\n    get:()=>requests.get('basket'),\r\n    addItem:(productId:number,quantity=1)=>requests.post(`basket?productId=${productId}&quantity=${quantity}`,{}),\r\n    deleteItem:(productId:number,quantity=1)=>requests.delete(`basket?productId=${productId}&quantity=${quantity}`)\r\n}\r\nconst Account={\r\n    login:(values:any)=>requests.post('account/login',values),\r\n    register:(values:any)=>requests.post('account/register',values),\r\n    currentUser:()=>requests.get('account/currentUser'),\r\n    fetchAddress:()=>requests.get('account/savedAddress')\r\n\r\n\r\n}\r\n\r\nconst Orders={\r\n    list: () => requests.get('orders'),\r\n    fetch: (id: string) => requests.get(`orders/${id}`),\r\n    create:(values:any)=>requests.post('orders',values)\r\n\r\n\r\n}\r\nconst Payment={\r\n    createPaymentIntent:()=>requests.post('payment',{})\r\n\r\n}\r\n\r\nconst agent = {\r\n    Catalog,\r\n    Errors,\r\n    Basket,\r\n    Account,\r\n    Orders,\r\n    Payment\r\n}\r\n\r\nexport default agent;"]},"metadata":{},"sourceType":"module"}