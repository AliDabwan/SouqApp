{"ast":null,"code":"import { validateFieldsNatively as e, toNestError as t } from \"@hookform/resolvers\";\nimport { appendErrors as r } from \"react-hook-form\";\n\nfunction o(o, n, a) {\n  return void 0 === n && (n = {}), void 0 === a && (a = {}), function (s, i, c) {\n    try {\n      return Promise.resolve(function (t, r) {\n        try {\n          var u = (n.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(o[\"sync\" === a.mode ? \"validateSync\" : \"validate\"](s, Object.assign({\n            abortEarly: !1\n          }, n, {\n            context: i\n          }))).then(function (t) {\n            return c.shouldUseNativeValidation && e({}, c), {\n              values: a.raw ? s : t,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return r(e);\n        }\n\n        return u && u.then ? u.then(void 0, r) : u;\n      }(0, function (e) {\n        if (!e.inner) throw e;\n        return {\n          values: {},\n          errors: t((o = e, n = !c.shouldUseNativeValidation && \"all\" === c.criteriaMode, (o.inner || []).reduce(function (e, t) {\n            if (e[t.path] || (e[t.path] = {\n              message: t.message,\n              type: t.type\n            }), n) {\n              var o = e[t.path].types,\n                  a = o && o[t.type];\n              e[t.path] = r(t.path, n, e, t.type, a ? [].concat(a, t.message) : t.message);\n            }\n\n            return e;\n          }, {})), c)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nexport { o as yupResolver };","map":{"version":3,"sources":["../src/yup.ts"],"names":["error","validateAllFieldCriteria","inner","reduce","previous","path","message","type","types","messages","appendErrors","concat","yupResolver","schema","schemaOptions","resolverOptions","values","context","options","Promise","process","env","NODE_ENV","console","warn","result","mode","Object","assign","abortEarly","then","shouldUseNativeValidation","validateFieldsNatively","raw","errors","e","toNestError","criteriaMode"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  appendErrors,\n  FieldError,\n  FieldValues,\n  Resolver,\n} from 'react-hook-form';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema: Yup.ObjectSchema<TFieldValues>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<TFieldValues> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}