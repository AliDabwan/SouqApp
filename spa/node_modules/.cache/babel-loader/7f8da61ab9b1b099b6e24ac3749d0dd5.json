{"ast":null,"code":"import _toConsumableArray from\"D:/Learn/react/SouqApp/spa/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"D:/Learn/react/SouqApp/spa/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Checkbox,FormControlLabel,FormGroup}from'@mui/material';import{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export default function CheckBoxButton(_ref){var items=_ref.items,onChange=_ref.onChange,checked=_ref.checked;var _useState=useState(checked||[]),_useState2=_slicedToArray(_useState,2),checkedItems=_useState2[0],setcheckedItems=_useState2[1];var handleChecked=function handleChecked(value){var currentIndex=checkedItems.findIndex(function(item){return item===value;});var newChecked=[];if(currentIndex===-1)newChecked=[].concat(_toConsumableArray(checkedItems),[value]);else newChecked=checkedItems.filter(function(item){return item!==value;});setcheckedItems(newChecked);onChange(newChecked);};return/*#__PURE__*/_jsx(FormGroup,{children:items.map(function(item){return/*#__PURE__*/_jsx(FormControlLabel,{label:item,control:/*#__PURE__*/_jsx(Checkbox,{checked:checkedItems.indexOf(item)!==-1,onClick:function onClick(){return handleChecked(item);}})},item);})});}","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/app/components/CheckBoxButton.tsx"],"names":["Checkbox","FormControlLabel","FormGroup","useState","CheckBoxButton","items","onChange","checked","checkedItems","setcheckedItems","handleChecked","value","currentIndex","findIndex","item","newChecked","filter","map","indexOf"],"mappings":"kOAAA,OAASA,QAAT,CAAmBC,gBAAnB,CAAqCC,SAArC,KAAsD,eAAtD,CACA,OAASC,QAAT,KAAyB,OAAzB,C,2CASA,cAAe,SAASC,CAAAA,cAAT,MAAwD,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAzBC,QAAyB,MAAzBA,QAAyB,CAAhBC,OAAgB,MAAhBA,OAAgB,CAEnE,cAAwCJ,QAAQ,CAACI,OAAO,EAAE,EAAV,CAAhD,wCAAOC,YAAP,eAAqBC,eAArB,eAEA,GAAMC,CAAAA,aAAa,CAAC,QAAdA,CAAAA,aAAc,CAACC,KAAD,CAAgB,CAChC,GAAMC,CAAAA,YAAY,CAACJ,YAAY,CAACK,SAAb,CAAuB,SAAAC,IAAI,QAAEA,CAAAA,IAAI,GAAGH,KAAT,EAA3B,CAAnB,CACA,GAAII,CAAAA,UAAoB,CAAC,EAAzB,CACA,GAAGH,YAAY,GAAG,CAAC,CAAnB,CAAqBG,UAAU,8BAAKP,YAAL,GAAkBG,KAAlB,EAAV,CAArB,IACKI,CAAAA,UAAU,CAACP,YAAY,CAACQ,MAAb,CAAoB,SAAAF,IAAI,QAAEA,CAAAA,IAAI,GAAGH,KAAT,EAAxB,CAAX,CACLF,eAAe,CAACM,UAAD,CAAf,CAEAT,QAAQ,CAACS,UAAD,CAAR,CACH,CARD,CASF,mBACE,KAAC,SAAD,WAIIV,KAAK,CAACY,GAAN,CAAU,SAAAH,IAAI,qBACV,KAAC,gBAAD,EACC,KAAK,CAAEA,IADR,CAEC,OAAO,cAAE,KAAC,QAAD,EACT,OAAO,CAAEN,YAAY,CAACU,OAAb,CAAqBJ,IAArB,IAA6B,CAAC,CAD9B,CAET,OAAO,CAAE,yBAAIJ,CAAAA,aAAa,CAACI,IAAD,CAAjB,EAFA,EAFV,EAAuBA,IAAvB,CADU,EAAd,CAJJ,EADF,CAqBD","sourcesContent":["import { Checkbox, FormControlLabel, FormGroup } from '@mui/material'\r\nimport { useState } from 'react'\r\n\r\n\r\ntype Props={\r\n\r\n    items:string[]\r\n    checked?:string[],\r\n    onChange:(items:string[])=>void\r\n}\r\nexport default function CheckBoxButton({items,onChange,checked}:Props) {\r\n\r\n    const [checkedItems, setcheckedItems] = useState(checked||[])\r\n\r\n    const handleChecked=(value:string)=>{\r\n        const currentIndex=checkedItems.findIndex(item=>item===value);\r\n        let newChecked:string []=[];\r\n        if(currentIndex===-1)newChecked=[...checkedItems,value]\r\n        else newChecked=checkedItems.filter(item=>item!==value);\r\n        setcheckedItems(newChecked);\r\n\r\n        onChange(newChecked);\r\n    }\r\n  return (\r\n    <FormGroup>\r\n                   \r\n    {\r\n       \r\n        items.map(item=>(\r\n            <FormControlLabel key={item}\r\n             label={item}\r\n             control={<Checkbox\r\n             checked={checkedItems.indexOf(item)!==-1}\r\n             onClick={()=>handleChecked(item)}\r\n             \r\n             />} />\r\n\r\n        ))\r\n\r\n    }\r\n\r\n\r\n</FormGroup>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}