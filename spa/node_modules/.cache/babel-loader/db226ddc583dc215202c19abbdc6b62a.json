{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"badgeContent\", \"component\", \"children\", \"invisible\", \"max\", \"slotProps\", \"slots\", \"showZero\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useBadge from '../useBadge';\nimport { getBadgeUnstyledUtilityClass } from './badgeUnstyledClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUnstyledUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Unstyled badge](https://mui.com/base/react-badge/)\n *\n * API:\n *\n * - [BadgeUnstyled API](https://mui.com/base/react-badge/components-api/#badge-unstyled)\n */\n\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    component,\n    children,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    max: maxProp\n  }));\n\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || slots.root || 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Badge = slots.badge || 'span';\n  const badgeProps = useSlotProps({\n    elementType: Badge,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default BadgeUnstyled;","map":{"version":3,"sources":["D:/Ali/react/SouqApp/spa/node_modules/@mui/lab/node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","composeClasses","useBadge","getBadgeUnstyledUtilityClass","useSlotProps","useClassNamesOverride","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","invisible","slots","root","badge","BadgeUnstyled","forwardRef","props","ref","component","children","max","maxProp","slotProps","showZero","other","badgeContent","displayValue","classes","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","className","Badge","badgeProps","process","env","NODE_ENV","propTypes","node","bool","number","shape","oneOfType","func","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"badgeContent\", \"component\", \"children\", \"invisible\", \"max\", \"slotProps\", \"slots\", \"showZero\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useBadge from '../useBadge';\nimport { getBadgeUnstyledUtilityClass } from './badgeUnstyledClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUnstyledUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Unstyled badge](https://mui.com/base/react-badge/)\n *\n * API:\n *\n * - [BadgeUnstyled API](https://mui.com/base/react-badge/components-api/#badge-unstyled)\n */\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n      component,\n      children,\n      max: maxProp = 99,\n      slotProps = {},\n      slots = {},\n      showZero = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    max: maxProp\n  }));\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  });\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || slots.root || 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Badge = slots.badge || 'span';\n  const badgeProps = useSlotProps({\n    elementType: Badge,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default BadgeUnstyled;"]},"metadata":{},"sourceType":"module"}