{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learn\\\\react\\\\SouqApp\\\\spa\\\\src\\\\features\\\\account\\\\Register.tsx\",\n    _s = $RefreshSig$();\n\nimport Avatar from '@mui/material/Avatar';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { Paper } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { LoadingButton } from '@mui/lab';\nimport agent from '../../app/api/agent';\nimport { AppRegistration } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n\n  var _errors$username, _errors$email, _errors$password;\n\n  // const [validationErrors, setValidationErrors] = useState([])\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: {\n      isSubmitting,\n      isValid,\n      errors\n    }\n  } = useForm({\n    mode: 'all'\n  });\n\n  const handleApiErrors = errors => {\n    if (errors) {\n      errors.forEach(error => {\n        if (error.includes('Password')) {\n          setError('password', {\n            message: error\n          });\n        } else if (error.includes('Email')) {\n          setError('email', {\n            message: error\n          });\n        } else if (error.includes('Username')) {\n          setError('username', {\n            message: error\n          });\n        }\n      });\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // <ThemeProvider theme={defaultTheme}>\n    _jsxDEV(Container, {\n      component: Paper,\n      maxWidth: \"sm\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginTop: 13,\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          sx: {\n            m: 1,\n            bgcolor: 'primary.main'\n          },\n          children: /*#__PURE__*/_jsxDEV(AppRegistration, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          onSubmit: handleSubmit(data => agent.Account.register(data).catch(error => handleApiErrors(error))),\n          noValidate: true,\n          sx: {\n            mt: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              m: 1,\n              bgcolor: 'primary.main'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\" //   required\n            ,\n            fullWidth: true,\n            label: \"Username\" //   autoComplete=\"email\"\n            ,\n            autoFocus: true //   onChange={handleInputChange}\n            //   value={values.username}\n            ,\n            ...register('username', {\n              required: true\n            }),\n            error: !!errors.username,\n            helperText: errors === null || errors === void 0 ? void 0 : (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\" //   required\n            ,\n            fullWidth: true,\n            label: \"Email\" //   autoComplete=\"email\"\n            //   onChange={handleInputChange}\n            //   value={values.username}\n            ,\n            ...register('email', {\n              required: true,\n              pattern: {\n                value: /^\\w+[\\w-\\.]*\\@\\w+((-\\w+)|(\\w*))\\.[a-z]{2,3}$/,\n                message: 'Not a valid Email Address'\n              }\n            }),\n            error: !!errors.email,\n            helperText: errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\" //   required\n            ,\n            fullWidth: true //   name=\"password\"\n            ,\n            label: \"Password\",\n            type: \"password\",\n            ...register('password', {\n              required: 'كلمة المرور مطلوبة',\n              pattern: {\n                value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.*\\s).{8,}$/,\n                message: 'Not a valid Password'\n              }\n            }),\n            error: !!errors.password,\n            helperText: errors === null || errors === void 0 ? void 0 : (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message //   autoComplete=\"current-password\"\n            //   onChange={handleInputChange}\n            //   value={values.password}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n            disabled: !isValid,\n            loading: isSubmitting,\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            sx: {\n              mt: 3,\n              mb: 2\n            },\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                component: Link,\n                to: \"../login\",\n                sx: {\n                  fontWeight: 'bold',\n                  color: 'primary.main',\n                  textDecoration: 'none'\n                },\n                children: \"Already have an account? Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this) // { </ThemeProvider> }\n\n  );\n}\n\n_s(Login, \"79i8SaldF01yTA1/yUd+l2EAZwE=\", false, function () {\n  return [useForm];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/features/account/Register.tsx"],"names":["Avatar","TextField","Grid","Box","Typography","Container","Paper","Link","useForm","LoadingButton","agent","AppRegistration","Login","register","handleSubmit","setError","formState","isSubmitting","isValid","errors","mode","handleApiErrors","forEach","error","includes","message","marginTop","p","display","flexDirection","alignItems","m","bgcolor","data","Account","catch","mt","required","username","pattern","value","email","password","mb","fontWeight","color","textDecoration"],"mappings":"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","sourcesContent":["import Avatar from '@mui/material/Avatar';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { Paper } from '@mui/material';\r\nimport { Link } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport agent from '../../app/api/agent';\r\nimport { AppRegistration } from '@mui/icons-material';\r\n\r\n\r\nexport default function Login() {\r\n  \r\n    // const [validationErrors, setValidationErrors] = useState([])\r\n    const {register,handleSubmit,setError,formState:{isSubmitting,isValid,errors}}=useForm({\r\n        mode:'all'\r\n    });\r\n\r\n\r\n    const handleApiErrors=(errors:string[])=>{\r\n        if(errors){\r\n            errors.forEach(error=>{\r\n                if(error.includes('Password')){\r\n                    setError('password',{message:error});\r\n                }else if (error.includes('Email')){\r\n                    setError('email',{message:error});\r\n                }\r\n                else if (error.includes('Username')){\r\n                    setError('username',{message:error});\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n   \r\n\r\n\r\n  return (\r\n    // <ThemeProvider theme={defaultTheme}>\r\n      <Container component={Paper} maxWidth=\"sm\">\r\n        {/* <CssBaseline /> */}\r\n        <Box\r\n          sx={{\r\n            marginTop: 13,\r\n            p:3,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\r\n            <AppRegistration />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n             Register\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={handleSubmit((data)=>\r\n            agent.Account.register(data).catch(error=>handleApiErrors(error))\r\n            )} noValidate sx={{ mt: 1 }}>\r\n\r\n                {\r\n    \r\n\r\n\r\n                }\r\n\r\n\r\n            <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\r\n          </Avatar>\r\n            <TextField\r\n            \r\n              margin=\"normal\"\r\n            //   required\r\n              fullWidth\r\n              label=\"Username\"\r\n            //   autoComplete=\"email\"\r\n              autoFocus\r\n            //   onChange={handleInputChange}\r\n            //   value={values.username}\r\n            {...register('username',{required:true})}\r\n            error={!!errors.username}\r\n            helperText={errors?.username?.message}\r\n            />\r\n             <TextField\r\n              margin=\"normal\"\r\n            //   required\r\n              fullWidth\r\n              label=\"Email\"\r\n            //   autoComplete=\"email\"\r\n            //   onChange={handleInputChange}\r\n            //   value={values.username}\r\n            {...register('email',{\r\n                required:true,\r\n                pattern:{\r\n                    value:/^\\w+[\\w-\\.]*\\@\\w+((-\\w+)|(\\w*))\\.[a-z]{2,3}$/,\r\n                    message:'Not a valid Email Address'\r\n                }\r\n                })}\r\n            error={!!errors.email}\r\n            helperText={errors?.email?.message}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n            //   required\r\n              fullWidth\r\n            //   name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n                {...register('password',\r\n                        {required:'كلمة المرور مطلوبة',\r\n                            pattern:{\r\n                                value:/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.*\\s).{8,}$/,\r\n                                message:'Not a valid Password'\r\n                            }\r\n                        \r\n                        }\r\n                    )\r\n                }\r\n              error={!!errors.password}\r\n              helperText={errors?.password?.message}\r\n\r\n\r\n\r\n            //   autoComplete=\"current-password\"\r\n            //   onChange={handleInputChange}\r\n            //   value={values.password}\r\n            />\r\n            {/* <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            /> */}\r\n             {/* {\r\n                validationErrors.length > 0 &&\r\n                <Alert severity='error'>\r\n                    <AlertTitle>Validation Errors</AlertTitle>\r\n                    <List>\r\n                        {\r\n                            validationErrors.map(error => (\r\n                                <ListItem key={error}>\r\n                                    <ListItemText>{error}</ListItemText>\r\n                                </ListItem>\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </Alert>\r\n            } */}\r\n\r\n            \r\n            <LoadingButton\r\n            disabled={!isValid}\r\n            loading={isSubmitting}\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Register\r\n            </LoadingButton>\r\n            <Grid container>\r\n              {/* <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid> */}\r\n              <Grid item>\r\n                <Typography \r\n                component={Link}\r\n                to={\"../login\"}\r\n               sx={{fontWeight:'bold',color:'primary.main',textDecoration:'none'}}\r\n                >\r\n                  {\"Already have an account? Sign In\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        {/* <Copyright sx={{ mt: 8, mb: 4 }} /> */}\r\n      </Container>\r\n    // { </ThemeProvider> }\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}