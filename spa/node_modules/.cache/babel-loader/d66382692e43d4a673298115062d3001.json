{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport agent from \"../../app/api/agent\";\nimport { createSlice } from '@reduxjs/toolkit';\nconst productsAdapter = createEntityAdapter();\nexport const fetchProductsAsync = createAsyncThunk('catalog/fetchProductsAsync', async (_, thunkAPI) => {\n  try {\n    return await agent.Catalog.list();\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.data\n    });\n  }\n});\nexport const fetchProductAsync = createAsyncThunk('catalog/fetchProductAsync', async (productId, thunkAPI) => {\n  try {\n    return await agent.Catalog.details(productId);\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.data\n    });\n  }\n});\nconst catalogSlice = createSlice({\n  name: 'catalog',\n  initialState: productsAdapter.getInitialState({\n    productsLoaded: false,\n    filtersLoaded: false,\n    status: 'idle',\n    brands: [],\n    types: []\n  }),\n  // get initialstate return all collections ids and entities inside coll\n  reducers: {},\n  extraReducers: builder => {\n    // GetAllListProducts\n    builder.addCase(fetchProductsAsync.pending, state => {\n      state.status = 'pendingFetchProductsAsync'; // console.log(action)\n    });\n    builder.addCase(fetchProductsAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      productsAdapter.setAll(state, action.payload);\n      state.productsLoaded = true;\n    });\n    builder.addCase(fetchProductsAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      console.log(action.payload);\n    }); //get single product\n\n    builder.addCase(fetchProductAsync.pending, state => {\n      state.status = 'pendingFetchProductAsync'; // console.log(action)\n    });\n    builder.addCase(fetchProductAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      productsAdapter.upsertOne(state, action.payload);\n    });\n    builder.addCase(fetchProductAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      console.log(action);\n    });\n  }\n});\nexport const productSelectors = productsAdapter.getSelectors(state => state.catalog); //   export const {} = catalogSlice.actions\n\nexport default catalogSlice.reducer;","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/features/catalog/catalogSlice.ts"],"names":["createAsyncThunk","createEntityAdapter","agent","createSlice","productsAdapter","fetchProductsAsync","_","thunkAPI","Catalog","list","error","rejectWithValue","data","fetchProductAsync","productId","details","catalogSlice","name","initialState","getInitialState","productsLoaded","filtersLoaded","status","brands","types","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","setAll","payload","rejected","console","log","upsertOne","productSelectors","getSelectors","catalog","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { Product } from \"../../app/models/product\";\r\nimport agent from \"../../app/api/agent\";\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { RootState } from \"../../app/store/configureStore\";\r\n\r\nconst productsAdapter=createEntityAdapter<Product>();\r\n\r\n\r\nexport const fetchProductsAsync=createAsyncThunk<Product[]>(\r\n\r\n    'catalog/fetchProductsAsync',\r\n    async(_,thunkAPI)=>{\r\n      try {\r\n        return await agent.Catalog.list();\r\n      } catch (error:any) {\r\n        return thunkAPI.rejectWithValue({error:error.data})\r\n      }\r\n  \r\n    }\r\n  )\r\n\r\n\r\n  export const fetchProductAsync=createAsyncThunk<Product,string>(\r\n\r\n    'catalog/fetchProductAsync',\r\n    async(productId,thunkAPI)=>{\r\n      try {\r\n        return await agent.Catalog.details(productId);\r\n      } catch (error:any) {\r\n       return thunkAPI.rejectWithValue({error:error.data})\r\n      }\r\n  \r\n    }\r\n  )\r\n  \r\n  \r\n  \r\n  const catalogSlice = createSlice({\r\n    name: 'catalog',\r\n    initialState:productsAdapter.getInitialState({\r\n        productsLoaded:false,\r\n        filtersLoaded:false,\r\n        status:'idle',\r\n        brands:[],\r\n        types:[]\r\n    }), // get initialstate return all collections ids and entities inside coll\r\n    reducers: {},\r\n    extraReducers: (builder=> {\r\n    \r\n        // GetAllListProducts\r\n        builder.addCase(fetchProductsAsync.pending, (state)=>{\r\n          state.status='pendingFetchProductsAsync';\r\n          // console.log(action)\r\n        });\r\n        builder.addCase(fetchProductsAsync.fulfilled,(state,action)=>{\r\n          state.status='idle';\r\n          productsAdapter.setAll(state,action.payload);\r\n          state.productsLoaded=true;\r\n\r\n        });\r\n        builder.addCase(fetchProductsAsync.rejected,(state,action)=>{\r\n          state.status='idle'\r\n          console.log(action.payload)\r\n\r\n        });\r\n\r\n        //get single product\r\n        builder.addCase(fetchProductAsync.pending, (state)=>{\r\n            state.status='pendingFetchProductAsync';\r\n            // console.log(action)\r\n          });\r\n          builder.addCase(fetchProductAsync.fulfilled,(state,action)=>{\r\n            state.status='idle';\r\n            productsAdapter.upsertOne(state,action.payload);\r\n  \r\n          });\r\n          builder.addCase(fetchProductAsync.rejected,(state,action)=>{\r\n            state.status='idle'\r\n            console.log(action)\r\n          });\r\n    \r\n    \r\n       \r\n    \r\n      })\r\n  });\r\n  \r\n\r\nexport const productSelectors=productsAdapter.getSelectors((state:RootState)=>state.catalog);\r\n\r\n//   export const {} = catalogSlice.actions\r\n  \r\n  export default catalogSlice.reducer"]},"metadata":{},"sourceType":"module"}