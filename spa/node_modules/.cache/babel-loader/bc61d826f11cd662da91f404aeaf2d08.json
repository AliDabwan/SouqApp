{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learn\\\\react\\\\SouqApp\\\\spa\\\\src\\\\features\\\\catalog\\\\Catalog.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport Loader from \"../../app/layout/Loader\";\nimport ProductList from \"./ProductList\";\nimport { useAppDispatch, useAppSelector } from \"../../app/store/configureStore\";\nimport { fetchProductsAsync, fetchfiltersAsync, productSelectors } from \"./catalogSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Catalog() {\n  _s();\n\n  // const [products, setProducts] = useState<Product[]>([])// context\n  const products = useAppSelector(productSelectors.selectAll);\n  const dispatch = useAppDispatch();\n  const {\n    status,\n    productsLoaded,\n    filtersLoaded\n  } = useAppSelector(state => state.catalog);\n  useEffect(() => {\n    // agent.Catalog.list()\n    //     .then(products => setProducts(products))\n    //     .catch(error => console.log(error))\n    //     .finally(() => setLoading(false))\n    if (!productsLoaded) {\n      dispatch(fetchProductsAsync());\n    }\n  }, [productsLoaded, dispatch]);\n  useEffect(() => {\n    // agent.Catalog.list()\n    //     .then(products => setProducts(products))\n    //     .catch(error => console.log(error))\n    //     .finally(() => setLoading(false))\n    if (!filtersLoaded) {\n      dispatch(fetchfiltersAsync());\n    }\n  }, [filtersLoaded, dispatch]);\n  if (status.includes('pending')) return /*#__PURE__*/_jsxDEV(Loader, {\n    message: \"Loading Products...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 44\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ProductList, {\n      products: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Catalog, \"SRlfRfvS+WPhH1g0PficjdTlFe8=\", false, function () {\n  return [useAppSelector, useAppDispatch, useAppSelector];\n});\n\n_c = Catalog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Catalog\");","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/features/catalog/Catalog.tsx"],"names":["useEffect","Loader","ProductList","useAppDispatch","useAppSelector","fetchProductsAsync","fetchfiltersAsync","productSelectors","Catalog","products","selectAll","dispatch","status","productsLoaded","filtersLoaded","state","catalog","includes"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,gCAA/C;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,EAAgDC,gBAAhD,QAAwE,gBAAxE;;;AAGA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAC9B;AACA,QAAMC,QAAQ,GAACL,cAAc,CAACG,gBAAgB,CAACG,SAAlB,CAA7B;AACA,QAAMC,QAAQ,GAACR,cAAc,EAA7B;AACA,QAAM;AAACS,IAAAA,MAAD;AAAQC,IAAAA,cAAR;AAAuBC,IAAAA;AAAvB,MAAsCV,cAAc,CAACW,KAAK,IAAEA,KAAK,CAACC,OAAd,CAA1D;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA;AACA;AACA;AAEA,QAAI,CAACa,cAAL,EAAqB;AACjBF,MAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AAEH;AAGJ,GAbQ,EAcH,CAACQ,cAAD,EAAgBF,QAAhB,CAdG,CAAT;AAgBIX,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA;AACA;AACA;AAEA,QAAI,CAACc,aAAL,EAAoB;AAChBH,MAAAA,QAAQ,CAACL,iBAAiB,EAAlB,CAAR;AAEH;AAGJ,GAbQ,EAcH,CAACQ,aAAD,EAAeH,QAAf,CAdG,CAAT;AAeJ,MAAIC,MAAM,CAACK,QAAP,CAAgB,SAAhB,CAAJ,EAAgC,oBAAO,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,UAAP;AAChC,sBACI;AAAA,2BACI,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAER;AAAvB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH;;GA/CuBD,O;UAELJ,c,EACAD,c,EAC6BC,c;;;KAJxBI,O","sourcesContent":["import { useEffect } from \"react\"\r\nimport Loader from \"../../app/layout/Loader\"\r\nimport ProductList from \"./ProductList\"\r\nimport { useAppDispatch, useAppSelector } from \"../../app/store/configureStore\"\r\nimport { fetchProductsAsync, fetchfiltersAsync, productSelectors } from \"./catalogSlice\"\r\n\r\n\r\nexport default function Catalog() {\r\n    // const [products, setProducts] = useState<Product[]>([])// context\r\n    const products=useAppSelector(productSelectors.selectAll);\r\n    const dispatch=useAppDispatch();\r\n    const {status,productsLoaded,filtersLoaded}=useAppSelector(state=>state.catalog);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // agent.Catalog.list()\r\n        //     .then(products => setProducts(products))\r\n        //     .catch(error => console.log(error))\r\n        //     .finally(() => setLoading(false))\r\n\r\n        if (!productsLoaded) {\r\n            dispatch(fetchProductsAsync())\r\n            \r\n        }\r\n\r\n\r\n    }\r\n        , [productsLoaded,dispatch])\r\n\r\n        useEffect(() => {\r\n\r\n            // agent.Catalog.list()\r\n            //     .then(products => setProducts(products))\r\n            //     .catch(error => console.log(error))\r\n            //     .finally(() => setLoading(false))\r\n    \r\n            if (!filtersLoaded) {\r\n                dispatch(fetchfiltersAsync())\r\n                \r\n            }\r\n    \r\n    \r\n        }\r\n            , [filtersLoaded,dispatch])\r\n    if (status.includes('pending')) return <Loader message='Loading Products...' />\r\n    return (\r\n        <>\r\n            <ProductList products={products}></ProductList>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}