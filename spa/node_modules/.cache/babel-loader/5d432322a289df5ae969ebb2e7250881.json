{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport agent from \"../../app/api/agent\";\nimport { createSlice } from '@reduxjs/toolkit';\nconst productsAdapter = createEntityAdapter();\n\nconst getAxiosParams = productParams => {\n  const params = new URLSearchParams();\n  params.append('pageNumber', productParams.pageNumber.toString());\n  params.append('pageSize', productParams.pageSize.toString());\n  params.append('orderBy', productParams.orderBy);\n  if (productParams.searchTerm) params.append('searchTerm', productParams.searchTerm);\n  if (productParams.brands) params.append('brands', productParams.brands.toString());\n  if (productParams.types) params.append('types', productParams.types.toString());\n  return params;\n};\n\nexport const fetchProductsAsync = createAsyncThunk('catalog/fetchProductsAsync', async (_, thunkAPI) => {\n  const params = getAxiosParams(thunkAPI.getState().catalog.productParams); // this method get the global state or redux state\n\n  try {\n    return await agent.Catalog.list(params);\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.data\n    });\n  }\n});\nexport const fetchProductAsync = createAsyncThunk('catalog/fetchProductAsync', async (productId, thunkAPI) => {\n  try {\n    return await agent.Catalog.details(productId);\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.data\n    });\n  }\n});\nexport const fetchfiltersAsync = createAsyncThunk('catalog/fetchfiltersAsync', async (_, thunkAPI) => {\n  try {\n    return await agent.Catalog.fetchFilters();\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.data\n    });\n  }\n});\n\nconst initParams = () => ({\n  pageNumber: 1,\n  pageSize: 8,\n  orderBy: 'name'\n});\n\nconst catalogSlice = createSlice({\n  name: 'catalog',\n  initialState: productsAdapter.getInitialState({\n    productsLoaded: false,\n    filtersLoaded: false,\n    status: 'idle',\n    brands: [],\n    types: [],\n    productParams: initParams()\n  }),\n  // get initialstate return all collections ids and entities inside coll\n  reducers: {\n    setProductParams: (state, action) => {\n      state.productsLoaded = false;\n      state.productParams = { ...state.productParams,\n        ...action.payload\n      };\n    },\n    resetProductParams: state => {\n      state.productParams = initParams();\n    }\n  },\n  extraReducers: builder => {\n    // GetAllListProducts\n    builder.addCase(fetchProductsAsync.pending, state => {\n      state.status = 'pendingFetchProductsAsync'; // console.log(action)\n    });\n    builder.addCase(fetchProductsAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      productsAdapter.setAll(state, action.payload);\n      state.productsLoaded = true;\n    });\n    builder.addCase(fetchProductsAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      console.log(action.payload);\n    }); //get single product\n\n    builder.addCase(fetchProductAsync.pending, state => {\n      state.status = 'pendingFetchProductAsync'; // console.log(action)\n    });\n    builder.addCase(fetchProductAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      productsAdapter.upsertOne(state, action.payload);\n    });\n    builder.addCase(fetchProductAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      console.log(action);\n    }); //filter single product\n\n    builder.addCase(fetchfiltersAsync.pending, state => {\n      state.status = 'pendingFetchFiltersAsync'; // console.log(action)\n    });\n    builder.addCase(fetchfiltersAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.filtersLoaded = true;\n      state.brands = action.payload.brands;\n      state.types = action.payload.types;\n    });\n    builder.addCase(fetchfiltersAsync.rejected, (state, action) => {\n      state.status = 'idle';\n    });\n  }\n});\nexport const productSelectors = productsAdapter.getSelectors(state => state.catalog);\nexport const {\n  resetProductParams,\n  setProductParams\n} = catalogSlice.actions; //   export const {} = catalogSlice.actions\n\nexport default catalogSlice.reducer;","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/features/catalog/catalogSlice.ts"],"names":["createAsyncThunk","createEntityAdapter","agent","createSlice","productsAdapter","getAxiosParams","productParams","params","URLSearchParams","append","pageNumber","toString","pageSize","orderBy","searchTerm","brands","types","fetchProductsAsync","_","thunkAPI","getState","catalog","Catalog","list","error","rejectWithValue","data","fetchProductAsync","productId","details","fetchfiltersAsync","fetchFilters","initParams","catalogSlice","name","initialState","getInitialState","productsLoaded","filtersLoaded","status","reducers","setProductParams","state","action","payload","resetProductParams","extraReducers","builder","addCase","pending","fulfilled","setAll","rejected","console","log","upsertOne","productSelectors","getSelectors","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { Product, ProductParams } from \"../../app/models/product\";\r\nimport agent from \"../../app/api/agent\";\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { RootState } from \"../../app/store/configureStore\";\r\n\r\ntype CatalogState={\r\n  productsLoaded:boolean,\r\n  filtersLoaded:boolean,\r\n  status:string,\r\n  brands:string[],\r\n  types:string[],\r\n  productParams:ProductParams\r\n}\r\nconst productsAdapter=createEntityAdapter<Product>();\r\n\r\nconst getAxiosParams=(productParams:ProductParams)=>{\r\n  const params=new URLSearchParams();\r\n  params.append('pageNumber',productParams.pageNumber.toString())\r\n  params.append('pageSize',productParams.pageSize.toString())\r\n  params.append('orderBy',productParams.orderBy)\r\n if(productParams.searchTerm) params.append('searchTerm',productParams.searchTerm)\r\n if(productParams.brands) params.append('brands',productParams.brands.toString())\r\n if(productParams.types) params.append('types',productParams.types.toString())\r\nreturn params\r\n\r\n}\r\n\r\nexport const fetchProductsAsync=createAsyncThunk<Product[],void,{state:RootState}>(\r\n\r\n    'catalog/fetchProductsAsync',\r\n    async(_,thunkAPI)=>{\r\n      const params=getAxiosParams(thunkAPI.getState().catalog.productParams); // this method get the global state or redux state\r\n\r\n      try {\r\n        return await agent.Catalog.list(params);\r\n      } catch (error:any) {\r\n        return thunkAPI.rejectWithValue({error:error.data})\r\n      }\r\n  \r\n    }\r\n  )\r\n\r\n\r\n  export const fetchProductAsync=createAsyncThunk<Product,string>(\r\n\r\n    'catalog/fetchProductAsync',\r\n    async(productId,thunkAPI)=>{\r\n      try {\r\n        return await agent.Catalog.details(productId);\r\n      } catch (error:any) {\r\n       return thunkAPI.rejectWithValue({error:error.data})\r\n      }\r\n  \r\n    }\r\n  )\r\n  \r\n  export const fetchfiltersAsync=createAsyncThunk(\r\n\r\n    'catalog/fetchfiltersAsync',\r\n    async(_,thunkAPI)=>{\r\n      try {\r\n        return await agent.Catalog.fetchFilters();\r\n      } catch (error:any) {\r\n       return thunkAPI.rejectWithValue({error:error.data})\r\n      }\r\n  \r\n    }\r\n  )\r\n  \r\n  const initParams=()=>({\r\n\r\n    pageNumber:1,\r\n    pageSize:8,\r\n    orderBy:'name'\r\n  })\r\n\r\n  const catalogSlice = createSlice({\r\n    name: 'catalog',\r\n    initialState:productsAdapter.getInitialState<CatalogState>({\r\n        productsLoaded:false,\r\n        filtersLoaded:false,\r\n        status:'idle',\r\n        brands:[],\r\n        types:[],\r\n        productParams:initParams()\r\n         \r\n\r\n        \r\n    }), // get initialstate return all collections ids and entities inside coll\r\n    reducers: {\r\n      setProductParams:(state,action)=>{\r\n        state.productsLoaded=false;\r\n        state.productParams={...state.productParams,...action.payload}\r\n      },\r\n      resetProductParams:(state)=>{\r\n        state.productParams=initParams();\r\n      }\r\n    },\r\n    extraReducers: (builder=> {\r\n    \r\n        // GetAllListProducts\r\n        builder.addCase(fetchProductsAsync.pending, (state)=>{\r\n          state.status='pendingFetchProductsAsync';\r\n          // console.log(action)\r\n        });\r\n        builder.addCase(fetchProductsAsync.fulfilled,(state,action)=>{\r\n          state.status='idle';\r\n          productsAdapter.setAll(state,action.payload);\r\n          state.productsLoaded = true;\r\n\r\n        });\r\n        builder.addCase(fetchProductsAsync.rejected,(state,action)=>{\r\n          state.status='idle'\r\n          console.log(action.payload)\r\n\r\n        });\r\n\r\n        //get single product\r\n        builder.addCase(fetchProductAsync.pending, (state)=>{\r\n            state.status='pendingFetchProductAsync';\r\n            // console.log(action)\r\n          });\r\n          builder.addCase(fetchProductAsync.fulfilled,(state,action)=>{\r\n            state.status='idle';\r\n            productsAdapter.upsertOne(state,action.payload);\r\n  \r\n          });\r\n          builder.addCase(fetchProductAsync.rejected,(state,action)=>{\r\n            state.status='idle'\r\n            console.log(action)\r\n          });\r\n    \r\n\r\n          //filter single product\r\n        builder.addCase(fetchfiltersAsync.pending, (state)=>{\r\n          state.status='pendingFetchFiltersAsync';\r\n          // console.log(action)\r\n        });\r\n        builder.addCase(fetchfiltersAsync.fulfilled,(state,action)=>{\r\n          state.status='idle';\r\n          state.filtersLoaded=true;\r\n          state.brands=action.payload.brands;\r\n          state.types=action.payload.types;\r\n\r\n        });\r\n        builder.addCase(fetchfiltersAsync.rejected,(state,action)=>{\r\n          state.status='idle'\r\n        });\r\n  \r\n    \r\n       \r\n    \r\n      })\r\n  });\r\n  \r\n\r\nexport const productSelectors=productsAdapter.getSelectors((state:RootState)=>state.catalog);\r\n\r\nexport const {resetProductParams,setProductParams}=catalogSlice.actions;\r\n//   export const {} = catalogSlice.actions\r\n  \r\n  export default catalogSlice.reducer"]},"metadata":{},"sourceType":"module"}