{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport agent from \"../../app/api/agent\";\nimport { createSlice } from '@reduxjs/toolkit';\nconst productsAdapter = createEntityAdapter();\nexport const fetchProductsAsync = createAsyncThunk('catalog/fetchProductsAsync', async () => {\n  try {\n    return await agent.Catalog.list();\n  } catch (error) {\n    console.log(error);\n  }\n});\nconst catalogSlice = createSlice({\n  name: 'catalog',\n  initialState: productsAdapter.getInitialState({\n    productsLoaded: false,\n    status: 'idle'\n  }),\n  // get initialstate return all collections ids and entities inside coll\n  reducers: {},\n  extraReducers: builder => {\n    // add\n    builder.addCase(fetchProductsAsync.pending, state => {\n      state.status = 'pendingFetchProductsAsync'; // console.log(action)\n    });\n    builder.addCase(fetchProductsAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      productsAdapter.setAll(state, action.payload);\n      state.productsLoaded = true;\n    });\n    builder.addCase(fetchProductsAsync.rejected, state => {\n      state.status = 'idle';\n    });\n  }\n});\nexport const {} = catalogSlice.actions;\nexport default catalogSlice.reducer;","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/features/catalog/catalogSlice.ts"],"names":["createAsyncThunk","createEntityAdapter","agent","createSlice","productsAdapter","fetchProductsAsync","Catalog","list","error","console","log","catalogSlice","name","initialState","getInitialState","productsLoaded","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","setAll","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,mBAA3B,QAAsD,kBAAtD;AAEA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,eAAe,GAACH,mBAAmB,EAAzC;AACA,OAAO,MAAMI,kBAAkB,GAACL,gBAAgB,CAE5C,4BAF4C,EAG5C,YAAS;AACP,MAAI;AACF,WAAO,MAAME,KAAK,CAACI,OAAN,CAAcC,IAAd,EAAb;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AAEF,CAV2C,CAAzC;AAeL,MAAMG,YAAY,GAAGR,WAAW,CAAC;AAC/BS,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAACT,eAAe,CAACU,eAAhB,CAAgC;AACzCC,IAAAA,cAAc,EAAC,KAD0B;AAEzCC,IAAAA,MAAM,EAAC;AAFkC,GAAhC,CAFkB;AAK3B;AACJC,EAAAA,QAAQ,EAAE,EANqB;AAO/BC,EAAAA,aAAa,EAAGC,OAAO,IAAG;AAEtB;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBf,kBAAkB,CAACgB,OAAnC,EAA6CC,KAAD,IAAS;AACnDA,MAAAA,KAAK,CAACN,MAAN,GAAa,2BAAb,CADmD,CAEnD;AACD,KAHD;AAIAG,IAAAA,OAAO,CAACC,OAAR,CAAgBf,kBAAkB,CAACkB,SAAnC,EAA6C,CAACD,KAAD,EAAOE,MAAP,KAAgB;AAC3DF,MAAAA,KAAK,CAACN,MAAN,GAAa,MAAb;AACAZ,MAAAA,eAAe,CAACqB,MAAhB,CAAuBH,KAAvB,EAA6BE,MAAM,CAACE,OAApC;AACAJ,MAAAA,KAAK,CAACP,cAAN,GAAqB,IAArB;AAED,KALD;AAMAI,IAAAA,OAAO,CAACC,OAAR,CAAgBf,kBAAkB,CAACsB,QAAnC,EAA6CL,KAAD,IAAS;AACnDA,MAAAA,KAAK,CAACN,MAAN,GAAa,MAAb;AACD,KAFD;AAOD;AA3B4B,CAAD,CAAhC;AA8BA,OAAO,MAAM,KAAKL,YAAY,CAACiB,OAAxB;AAEP,eAAejB,YAAY,CAACkB,OAA5B","sourcesContent":["import { createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { Product } from \"../../app/models/product\";\r\nimport agent from \"../../app/api/agent\";\r\nimport { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst productsAdapter=createEntityAdapter<Product>();\r\nexport const fetchProductsAsync=createAsyncThunk<Product[]>(\r\n\r\n    'catalog/fetchProductsAsync',\r\n    async()=>{\r\n      try {\r\n        return await agent.Catalog.list();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n  \r\n    }\r\n  )\r\n  \r\n  \r\n  \r\n  const catalogSlice = createSlice({\r\n    name: 'catalog',\r\n    initialState:productsAdapter.getInitialState({\r\n        productsLoaded:false,\r\n        status:'idle'\r\n    }), // get initialstate return all collections ids and entities inside coll\r\n    reducers: {},\r\n    extraReducers: (builder=> {\r\n    \r\n        // add\r\n        builder.addCase(fetchProductsAsync.pending, (state)=>{\r\n          state.status='pendingFetchProductsAsync';\r\n          // console.log(action)\r\n        });\r\n        builder.addCase(fetchProductsAsync.fulfilled,(state,action)=>{\r\n          state.status='idle';\r\n          productsAdapter.setAll(state,action.payload);\r\n          state.productsLoaded=true;\r\n          \r\n        });\r\n        builder.addCase(fetchProductsAsync.rejected,(state)=>{\r\n          state.status='idle'\r\n        });\r\n    \r\n    \r\n       \r\n    \r\n      })\r\n  });\r\n  \r\n  export const {} = catalogSlice.actions\r\n  \r\n  export default catalogSlice.reducer"]},"metadata":{},"sourceType":"module"}