{"ast":null,"code":"import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  var _React$useContext = React.useContext(TreeViewContext),\n      focus = _React$useContext.focus,\n      isExpanded = _React$useContext.isExpanded,\n      isExpandable = _React$useContext.isExpandable,\n      isFocused = _React$useContext.isFocused,\n      isDisabled = _React$useContext.isDisabled,\n      isSelected = _React$useContext.isSelected,\n      multiSelect = _React$useContext.multiSelect,\n      selectNode = _React$useContext.selectNode,\n      selectRange = _React$useContext.selectRange,\n      toggleExpansion = _React$useContext.toggleExpansion;\n\n  var expandable = isExpandable ? isExpandable(nodeId) : false;\n  var expanded = isExpanded ? isExpanded(nodeId) : false;\n  var focused = isFocused ? isFocused(nodeId) : false;\n  var disabled = isDisabled ? isDisabled(nodeId) : false;\n  var selected = isSelected ? isSelected(nodeId) : false;\n\n  var handleExpansion = function handleExpansion(event) {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      var multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close\n\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n\n  var handleSelection = function handleSelection(event) {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      var multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n\n  var preventSelection = function preventSelection(event) {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n\n  return {\n    disabled: disabled,\n    expanded: expanded,\n    selected: selected,\n    focused: focused,\n    handleExpansion: handleExpansion,\n    handleSelection: handleSelection,\n    preventSelection: preventSelection\n  };\n}","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/node_modules/@mui/lab/TreeItem/useTreeItem.js"],"names":["React","TreeViewContext","useTreeItem","nodeId","useContext","focus","isExpanded","isExpandable","isFocused","isDisabled","isSelected","multiSelect","selectNode","selectRange","toggleExpansion","expandable","expanded","focused","disabled","selected","handleExpansion","event","multiple","shiftKey","ctrlKey","metaKey","handleSelection","end","preventSelection","preventDefault"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  const {\n    focus,\n    isExpanded,\n    isExpandable,\n    isFocused,\n    isDisabled,\n    isSelected,\n    multiSelect,\n    selectNode,\n    selectRange,\n    toggleExpansion\n  } = React.useContext(TreeViewContext);\n  const expandable = isExpandable ? isExpandable(nodeId) : false;\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      // If already expanded and trying to toggle selection don't close\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}"]},"metadata":{},"sourceType":"module"}