{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { MenuUnstyledContext } from '../MenuUnstyled';\nimport useButton from '../useButton';\nimport useForcedRerendering from '../utils/useForcedRerendering';\n/**\n *\n * Demos:\n *\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\n\nexport default function useMenuItem(props) {\n  var _itemState$disabled;\n\n  const {\n    disabled = false,\n    ref,\n    label\n  } = props;\n  const id = useId();\n  const menuContext = React.useContext(MenuUnstyledContext);\n  const itemRef = React.useRef(null);\n  const handleRef = useForkRef(itemRef, ref);\n\n  if (menuContext === null) {\n    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');\n  }\n\n  const {\n    registerItem,\n    unregisterItem,\n    open,\n    registerHighlightChangeHandler\n  } = menuContext;\n  React.useEffect(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n\n    registerItem(id, {\n      disabled,\n      id,\n      ref: itemRef,\n      label\n    });\n    return () => unregisterItem(id);\n  }, [id, registerItem, unregisterItem, disabled, ref, label]);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true,\n    ref: handleRef\n  }); // Ensure the menu item is focused when highlighted\n\n  const [focusRequested, requestFocus] = React.useState(false);\n  const focusIfRequested = React.useCallback(() => {\n    if (focusRequested && itemRef.current != null) {\n      itemRef.current.focus();\n      requestFocus(false);\n    }\n  }, [focusRequested]);\n  React.useEffect(() => {\n    focusIfRequested();\n  });\n  React.useDebugValue({\n    id,\n    disabled,\n    label\n  });\n  const itemState = menuContext.getItemState(id != null ? id : '');\n  const {\n    highlighted\n  } = itemState != null ? itemState : {\n    highlighted: false\n  };\n  const rerender = useForcedRerendering();\n  React.useEffect(() => {\n    function updateHighlightedState(highlightedItemId) {\n      if (highlightedItemId === id && !highlighted) {\n        rerender();\n      } else if (highlightedItemId !== id && highlighted) {\n        rerender();\n      }\n    }\n\n    return registerHighlightChangeHandler(updateHighlightedState);\n  });\n  React.useEffect(() => {\n    // TODO: this should be handled by the MenuButton\n    requestFocus(highlighted && open);\n  }, [highlighted, open]);\n\n  if (id === undefined) {\n    return {\n      getRootProps: function () {\n        let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n          role: 'menuitem'\n        });\n      },\n      disabled: false,\n      focusVisible,\n      highlighted: false\n    };\n  }\n\n  return {\n    getRootProps: function () {\n      let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const optionProps = menuContext.getItemProps(id, otherHandlers);\n      return _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n        tabIndex: optionProps.tabIndex,\n        id: optionProps.id,\n        role: 'menuitem'\n      });\n    },\n    disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,\n    focusVisible,\n    highlighted\n  };\n}","map":{"version":3,"sources":["D:/Ali/react/SouqApp/spa/node_modules/@mui/material/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","MenuUnstyledContext","useButton","useForcedRerendering","useMenuItem","props","_itemState$disabled","disabled","ref","label","id","menuContext","useContext","itemRef","useRef","handleRef","Error","registerItem","unregisterItem","open","registerHighlightChangeHandler","useEffect","undefined","getRootProps","getButtonProps","focusVisible","focusableWhenDisabled","focusRequested","requestFocus","useState","focusIfRequested","useCallback","current","focus","useDebugValue","itemState","getItemState","highlighted","rerender","updateHighlightedState","highlightedItemId","otherHandlers","role","optionProps","getItemProps","tabIndex"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { MenuUnstyledContext } from '../MenuUnstyled';\nimport useButton from '../useButton';\nimport useForcedRerendering from '../utils/useForcedRerendering';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\nexport default function useMenuItem(props) {\n  var _itemState$disabled;\n  const {\n    disabled = false,\n    ref,\n    label\n  } = props;\n  const id = useId();\n  const menuContext = React.useContext(MenuUnstyledContext);\n  const itemRef = React.useRef(null);\n  const handleRef = useForkRef(itemRef, ref);\n  if (menuContext === null) {\n    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');\n  }\n  const {\n    registerItem,\n    unregisterItem,\n    open,\n    registerHighlightChangeHandler\n  } = menuContext;\n  React.useEffect(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n    registerItem(id, {\n      disabled,\n      id,\n      ref: itemRef,\n      label\n    });\n    return () => unregisterItem(id);\n  }, [id, registerItem, unregisterItem, disabled, ref, label]);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true,\n    ref: handleRef\n  });\n\n  // Ensure the menu item is focused when highlighted\n  const [focusRequested, requestFocus] = React.useState(false);\n  const focusIfRequested = React.useCallback(() => {\n    if (focusRequested && itemRef.current != null) {\n      itemRef.current.focus();\n      requestFocus(false);\n    }\n  }, [focusRequested]);\n  React.useEffect(() => {\n    focusIfRequested();\n  });\n  React.useDebugValue({\n    id,\n    disabled,\n    label\n  });\n  const itemState = menuContext.getItemState(id != null ? id : '');\n  const {\n    highlighted\n  } = itemState != null ? itemState : {\n    highlighted: false\n  };\n  const rerender = useForcedRerendering();\n  React.useEffect(() => {\n    function updateHighlightedState(highlightedItemId) {\n      if (highlightedItemId === id && !highlighted) {\n        rerender();\n      } else if (highlightedItemId !== id && highlighted) {\n        rerender();\n      }\n    }\n    return registerHighlightChangeHandler(updateHighlightedState);\n  });\n  React.useEffect(() => {\n    // TODO: this should be handled by the MenuButton\n    requestFocus(highlighted && open);\n  }, [highlighted, open]);\n  if (id === undefined) {\n    return {\n      getRootProps: (otherHandlers = {}) => _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n        role: 'menuitem'\n      }),\n      disabled: false,\n      focusVisible,\n      highlighted: false\n    };\n  }\n  return {\n    getRootProps: (otherHandlers = {}) => {\n      const optionProps = menuContext.getItemProps(id, otherHandlers);\n      return _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n        tabIndex: optionProps.tabIndex,\n        id: optionProps.id,\n        role: 'menuitem'\n      });\n    },\n    disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,\n    focusVisible,\n    highlighted\n  };\n}"]},"metadata":{},"sourceType":"module"}