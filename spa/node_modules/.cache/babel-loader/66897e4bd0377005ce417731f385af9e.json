{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport defaultReducer from './defaultListboxReducer';\nimport useControllableReducer from './useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\n\nconst defaultOptionComparer = (optionA, optionB) => optionA === optionB;\n\nconst defaultIsOptionDisabled = () => false;\n\nconst defaultOptionStringifier = option => typeof option === 'string' ? option : String(option);\n/**\n * @ignore - internal hook.\n *\n * The useListbox is a lower-level utility that is used to build a listbox component.\n * It's used to manage the state of the listbox and its options.\n * Contains the logic for keyboard navigation, selection, and focus management.\n */\n\n\nexport default function useListbox(props) {\n  var _props$optionIdGenera;\n\n  const {\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    id: idProp,\n    isOptionDisabled = defaultIsOptionDisabled,\n    listboxRef: externalListboxRef,\n    optionComparer = defaultOptionComparer,\n    optionStringifier = defaultOptionStringifier,\n    options,\n    stateReducer: externalReducer,\n    value: valueParam,\n    selectionLimit = null\n  } = props;\n  const id = useId(idProp);\n  const defaultIdGenerator = React.useCallback((_, index) => `${id}-option-${index}`, [id]);\n  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;\n  const propsWithDefaults = useLatest(_extends({}, props, {\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement,\n    isOptionDisabled,\n    optionComparer,\n    optionStringifier,\n    selectionLimit\n  }), [props]);\n  const listboxRef = React.useRef(null);\n  const handleRef = useForkRef(externalListboxRef, listboxRef);\n  const [{\n    highlightedValue,\n    selectedValues: selectedValue\n  }, dispatch] = useControllableReducer(defaultReducer, externalReducer, propsWithDefaults);\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  React.useEffect(() => {\n    // if a controlled value changes, we need to update the state to keep things in sync\n    if (valueParam !== undefined && valueParam !== selectedValue) {\n      dispatch({\n        type: ActionTypes.setValue,\n        event: null,\n        value: valueParam\n      });\n    }\n  }, [valueParam, selectedValue, dispatch]);\n  const highlightedIndex = React.useMemo(() => {\n    return highlightedValue == null ? -1 : options.findIndex(option => optionComparer(option, highlightedValue));\n  }, [highlightedValue, options, optionComparer]); // introducing refs to avoid recreating the getOptionState function on each change.\n\n  const latestSelectedValue = useLatest(selectedValue);\n  const latestHighlightedIndex = useLatest(highlightedIndex);\n  const previousOptions = React.useRef([]);\n  React.useEffect(() => {\n    if (areArraysEqual(previousOptions.current, options, optionComparer)) {\n      return;\n    }\n\n    dispatch({\n      type: ActionTypes.optionsChange,\n      event: null,\n      options,\n      previousOptions: previousOptions.current\n    });\n    previousOptions.current = options;\n  }, [options, optionComparer, dispatch]);\n  const setSelectedValue = React.useCallback(values => {\n    dispatch({\n      type: ActionTypes.setValue,\n      event: null,\n      value: values\n    });\n  }, [dispatch]);\n  const setHighlightedValue = React.useCallback(option => {\n    dispatch({\n      type: ActionTypes.setHighlight,\n      event: null,\n      highlight: option\n    });\n  }, [dispatch]);\n  const createHandleOptionClick = React.useCallback((option, other) => event => {\n    var _other$onClick;\n\n    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    event.preventDefault();\n    dispatch({\n      type: ActionTypes.optionClick,\n      option,\n      event\n    });\n  }, [dispatch]);\n  const createHandleOptionPointerOver = React.useCallback((option, other) => event => {\n    var _other$onMouseOver;\n\n    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    dispatch({\n      type: ActionTypes.optionHover,\n      option,\n      event\n    });\n  }, [dispatch]);\n\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const keysToPreventDefault = ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];\n\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the listbox handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n\n    dispatch({\n      type: ActionTypes.keyDown,\n      event\n    });\n    handleTextNavigation(event);\n  };\n\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listboxRef$current;\n\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {\n      // focus is within the listbox\n      return;\n    }\n\n    dispatch({\n      type: ActionTypes.blur,\n      event\n    });\n  };\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,\n      id,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      role: 'listbox',\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n\n  const getOptionState = React.useCallback(option => {\n    var _latestSelectedValue$;\n\n    const index = options.findIndex(opt => optionComparer(opt, option));\n    const selected = ((_latestSelectedValue$ = latestSelectedValue.current) != null ? _latestSelectedValue$ : []).some(value => value != null && optionComparer(option, value));\n    const disabled = isOptionDisabled(option, index);\n    const highlighted = latestHighlightedIndex.current === index && index !== -1;\n    return {\n      disabled,\n      highlighted,\n      index,\n      selected\n    };\n  }, [options, isOptionDisabled, optionComparer, latestSelectedValue, latestHighlightedIndex]);\n  const getOptionTabIndex = React.useCallback(optionState => {\n    if (focusManagement === 'activeDescendant') {\n      return undefined;\n    }\n\n    if (!optionState.highlighted) {\n      return -1;\n    }\n\n    if (optionState.disabled && !disabledItemsFocusable) {\n      return -1;\n    }\n\n    return 0;\n  }, [focusManagement, disabledItemsFocusable]);\n  const getOptionProps = React.useCallback(function (option) {\n    let otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const optionState = getOptionState(option);\n    return _extends({}, otherHandlers, {\n      'aria-disabled': optionState.disabled || undefined,\n      'aria-selected': optionState.selected,\n      id: optionIdGenerator(option, optionState.index),\n      onClick: createHandleOptionClick(option, otherHandlers),\n      onPointerOver: createHandleOptionPointerOver(option, otherHandlers),\n      role: 'option',\n      tabIndex: getOptionTabIndex(optionState)\n    });\n  }, [optionIdGenerator, createHandleOptionClick, createHandleOptionPointerOver, getOptionTabIndex, getOptionState]);\n  React.useDebugValue({\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue\n  });\n  return {\n    getRootProps,\n    getOptionProps,\n    getOptionState,\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue,\n    setSelectedValue,\n    setHighlightedValue\n  };\n}","map":{"version":3,"sources":["D:/Ali/react/SouqApp/spa/node_modules/@mui/material/node_modules/@mui/base/useListbox/useListbox.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","ActionTypes","defaultReducer","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","defaultOptionComparer","optionA","optionB","defaultIsOptionDisabled","defaultOptionStringifier","option","String","useListbox","props","_props$optionIdGenera","disabledItemsFocusable","disableListWrap","focusManagement","id","idProp","isOptionDisabled","listboxRef","externalListboxRef","optionComparer","optionStringifier","options","stateReducer","externalReducer","value","valueParam","selectionLimit","defaultIdGenerator","useCallback","_","index","optionIdGenerator","propsWithDefaults","useRef","handleRef","highlightedValue","selectedValues","selectedValue","dispatch","handleTextNavigation","searchString","event","type","textNavigation","useEffect","undefined","setValue","highlightedIndex","useMemo","findIndex","latestSelectedValue","latestHighlightedIndex","previousOptions","current","optionsChange","setSelectedValue","values","setHighlightedValue","setHighlight","highlight","createHandleOptionClick","other","_other$onClick","onClick","call","defaultPrevented","preventDefault","optionClick","createHandleOptionPointerOver","_other$onMouseOver","onMouseOver","optionHover","createHandleKeyDown","_other$onKeyDown","onKeyDown","keysToPreventDefault","push","includes","key","keyDown","createHandleBlur","_other$onBlur","_listboxRef$current","onBlur","contains","document","activeElement","blur","getRootProps","otherHandlers","role","tabIndex","ref","getOptionState","_latestSelectedValue$","opt","selected","some","disabled","highlighted","getOptionTabIndex","optionState","getOptionProps","onPointerOver","useDebugValue","highlightedOption","selectedOption"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport defaultReducer from './defaultListboxReducer';\nimport useControllableReducer from './useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst defaultOptionComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsOptionDisabled = () => false;\nconst defaultOptionStringifier = option => typeof option === 'string' ? option : String(option);\n\n/**\n * @ignore - internal hook.\n *\n * The useListbox is a lower-level utility that is used to build a listbox component.\n * It's used to manage the state of the listbox and its options.\n * Contains the logic for keyboard navigation, selection, and focus management.\n */\nexport default function useListbox(props) {\n  var _props$optionIdGenera;\n  const {\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    id: idProp,\n    isOptionDisabled = defaultIsOptionDisabled,\n    listboxRef: externalListboxRef,\n    optionComparer = defaultOptionComparer,\n    optionStringifier = defaultOptionStringifier,\n    options,\n    stateReducer: externalReducer,\n    value: valueParam,\n    selectionLimit = null\n  } = props;\n  const id = useId(idProp);\n  const defaultIdGenerator = React.useCallback((_, index) => `${id}-option-${index}`, [id]);\n  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;\n  const propsWithDefaults = useLatest(_extends({}, props, {\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement,\n    isOptionDisabled,\n    optionComparer,\n    optionStringifier,\n    selectionLimit\n  }), [props]);\n  const listboxRef = React.useRef(null);\n  const handleRef = useForkRef(externalListboxRef, listboxRef);\n  const [{\n    highlightedValue,\n    selectedValues: selectedValue\n  }, dispatch] = useControllableReducer(defaultReducer, externalReducer, propsWithDefaults);\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  React.useEffect(() => {\n    // if a controlled value changes, we need to update the state to keep things in sync\n    if (valueParam !== undefined && valueParam !== selectedValue) {\n      dispatch({\n        type: ActionTypes.setValue,\n        event: null,\n        value: valueParam\n      });\n    }\n  }, [valueParam, selectedValue, dispatch]);\n  const highlightedIndex = React.useMemo(() => {\n    return highlightedValue == null ? -1 : options.findIndex(option => optionComparer(option, highlightedValue));\n  }, [highlightedValue, options, optionComparer]);\n\n  // introducing refs to avoid recreating the getOptionState function on each change.\n  const latestSelectedValue = useLatest(selectedValue);\n  const latestHighlightedIndex = useLatest(highlightedIndex);\n  const previousOptions = React.useRef([]);\n  React.useEffect(() => {\n    if (areArraysEqual(previousOptions.current, options, optionComparer)) {\n      return;\n    }\n    dispatch({\n      type: ActionTypes.optionsChange,\n      event: null,\n      options,\n      previousOptions: previousOptions.current\n    });\n    previousOptions.current = options;\n  }, [options, optionComparer, dispatch]);\n  const setSelectedValue = React.useCallback(values => {\n    dispatch({\n      type: ActionTypes.setValue,\n      event: null,\n      value: values\n    });\n  }, [dispatch]);\n  const setHighlightedValue = React.useCallback(option => {\n    dispatch({\n      type: ActionTypes.setHighlight,\n      event: null,\n      highlight: option\n    });\n  }, [dispatch]);\n  const createHandleOptionClick = React.useCallback((option, other) => event => {\n    var _other$onClick;\n    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    event.preventDefault();\n    dispatch({\n      type: ActionTypes.optionClick,\n      option,\n      event\n    });\n  }, [dispatch]);\n  const createHandleOptionPointerOver = React.useCallback((option, other) => event => {\n    var _other$onMouseOver;\n    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    dispatch({\n      type: ActionTypes.optionHover,\n      option,\n      event\n    });\n  }, [dispatch]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the listbox handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ActionTypes.keyDown,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listboxRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {\n      // focus is within the listbox\n      return;\n    }\n    dispatch({\n      type: ActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,\n      id,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      role: 'listbox',\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getOptionState = React.useCallback(option => {\n    var _latestSelectedValue$;\n    const index = options.findIndex(opt => optionComparer(opt, option));\n    const selected = ((_latestSelectedValue$ = latestSelectedValue.current) != null ? _latestSelectedValue$ : []).some(value => value != null && optionComparer(option, value));\n    const disabled = isOptionDisabled(option, index);\n    const highlighted = latestHighlightedIndex.current === index && index !== -1;\n    return {\n      disabled,\n      highlighted,\n      index,\n      selected\n    };\n  }, [options, isOptionDisabled, optionComparer, latestSelectedValue, latestHighlightedIndex]);\n  const getOptionTabIndex = React.useCallback(optionState => {\n    if (focusManagement === 'activeDescendant') {\n      return undefined;\n    }\n    if (!optionState.highlighted) {\n      return -1;\n    }\n    if (optionState.disabled && !disabledItemsFocusable) {\n      return -1;\n    }\n    return 0;\n  }, [focusManagement, disabledItemsFocusable]);\n  const getOptionProps = React.useCallback((option, otherHandlers = {}) => {\n    const optionState = getOptionState(option);\n    return _extends({}, otherHandlers, {\n      'aria-disabled': optionState.disabled || undefined,\n      'aria-selected': optionState.selected,\n      id: optionIdGenerator(option, optionState.index),\n      onClick: createHandleOptionClick(option, otherHandlers),\n      onPointerOver: createHandleOptionPointerOver(option, otherHandlers),\n      role: 'option',\n      tabIndex: getOptionTabIndex(optionState)\n    });\n  }, [optionIdGenerator, createHandleOptionClick, createHandleOptionPointerOver, getOptionTabIndex, getOptionState]);\n  React.useDebugValue({\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue\n  });\n  return {\n    getRootProps,\n    getOptionProps,\n    getOptionState,\n    highlightedOption: highlightedValue,\n    selectedOption: selectedValue,\n    setSelectedValue,\n    setHighlightedValue\n  };\n}"]},"metadata":{},"sourceType":"module"}