{"ast":null,"code":"import _defineProperty from \"D:/Learn/react/SouqApp/spa/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:/Learn/react/SouqApp/spa/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n      defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$attribute = options.attribute,\n      defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n      _options$modeStorageK = options.modeStorageKey,\n      defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n      _options$colorSchemeS = options.colorSchemeStorageKey,\n      defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n      _options$defaultMode = options.defaultMode,\n      designSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      resolveTheme = options.resolveTheme,\n      excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? defaultModeStorageKey : _ref$modeStorageKey,\n        _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n        colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? defaultColorSchemeStorageKey : _ref$colorSchemeStora,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? defaultAttribute : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? designSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n        _ref$disableTransitio = _ref.disableTransitionOnChange,\n        disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n        _ref$storageWindow = _ref.storageWindow,\n        storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n        _ref$documentNode = _ref.documentNode,\n        documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n        _ref$colorSchemeNode = _ref.colorSchemeNode,\n        colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n        _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n        colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec,\n        _ref$disableNestedCon = _ref.disableNestedContext,\n        disableNestedContext = _ref$disableNestedCon === void 0 ? false : _ref$disableNestedCon,\n        _ref$disableStyleShee = _ref.disableStyleSheetGeneration,\n        disableStyleSheetGeneration = _ref$disableStyleShee === void 0 ? false : _ref$disableStyleShee;\n    var hasMounted = React.useRef(false);\n    var upperTheme = muiUseTheme();\n    var ctx = React.useContext(ColorSchemeContext);\n    var nested = !!ctx && !disableNestedContext;\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        _themeProp$components = themeProp.components,\n        components = _themeProp$components === void 0 ? {} : _themeProp$components,\n        _themeProp$generateCs = themeProp.generateCssVars,\n        generateCssVars = _themeProp$generateCs === void 0 ? function () {\n      return {\n        vars: {},\n        css: {}\n      };\n    } : _themeProp$generateCs,\n        cssVarPrefix = themeProp.cssVarPrefix,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      colorSchemeStorageKey: colorSchemeStorageKey,\n      defaultMode: defaultMode,\n      storageWindow: storageWindow\n    }),\n        stateMode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        stateColorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var mode = stateMode;\n    var colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    var calculatedMode = function () {\n      if (mode) {\n        return mode;\n      } // This scope occurs on the server\n\n\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n\n      return defaultMode;\n    }();\n\n    var calculatedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    var _generateCssVars = generateCssVars(),\n        rootCss = _generateCssVars.css,\n        rootVars = _generateCssVars.vars; // 3. Start composing the theme object\n\n\n    var theme = _extends({}, restThemeProp, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _generateCssVars2 = generateCssVars(key),\n          css = _generateCssVars2.css,\n          vars = _generateCssVars2.vars;\n\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(function (schemeKey) {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    var contextValue = React.useMemo(function () {\n      return {\n        mode: mode,\n        systemMode: systemMode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      };\n    }, [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    var shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    var element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: _defineProperty({}, colorSchemeSelector, rootCss)\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  var defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultMode: designSystemMode,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/node_modules/@mui/material/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","components","generateCssVars","vars","css","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","stateMode","mode","setMode","systemMode","lightColorScheme","darkColorScheme","stateColorScheme","colorScheme","setColorScheme","calculatedMode","calculatedColorScheme","rootCss","rootVars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    disableNestedContext = false,\n    disableStyleSheetGeneration = false\n  }) {\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const {\n        colorSchemes = {},\n        components = {},\n        generateCssVars = () => ({\n          vars: {},\n          css: {}\n        }),\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}