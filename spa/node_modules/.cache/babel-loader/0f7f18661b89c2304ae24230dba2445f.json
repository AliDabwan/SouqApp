{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learn\\\\react\\\\SouqApp\\\\spa\\\\src\\\\features\\\\checkout\\\\CheckoutPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { Paper, Typography, Stepper, Step, StepLabel, Box, Button, Container } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport AddressForm from \"./AddressForm\";\nimport PaymentForm from \"./PaymentForm\";\nimport Review from \"./Review\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { validationSchema } from \"./checkoutValidation\";\nimport { useAppDispatch, useAppSelector } from \"../../app/store/configureStore\";\nimport agent from \"../../app/api/agent\";\nimport { clearBasket } from \"../basket/basketSlice\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Navigate } from \"react-router-dom\";\nimport { useStripe, useElements, CardNumberElement } from \"@stripe/react-stripe-js\";\nimport { history } from \"../..\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst steps = ['Shipping address', 'Review your order', 'Payment details'];\nexport default function CheckoutPage() {\n  _s();\n\n  const [activeStep, setActiveStep] = useState(0);\n  const {\n    basket\n  } = useAppSelector(state => state.basket);\n  const [orderNumber, setOrderNumber] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const [cardState, setCardState] = useState({\n    elementError: {}\n  });\n  const [cardComplete, setCardComplete] = useState({\n    cardNumber: false,\n    cardExpiry: false,\n    cardCvc: false\n  });\n  const [paymentMessage, setPaymentMessage] = useState('');\n  const [paymentSucceeded, setPaymentSucceeded] = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const onCardInputChange = event => {\n    var _event$error;\n\n    setCardState({ ...cardState,\n      elementError: { ...cardState.elementError,\n        [event.elementType]: (_event$error = event.error) === null || _event$error === void 0 ? void 0 : _event$error.message\n      }\n    });\n    setCardComplete({ ...cardComplete,\n      [event.elementType]: event.complete\n    });\n  };\n\n  const getStepContent = step => {\n    switch (step) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(AddressForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 24\n        }, this);\n\n      case 1:\n        return /*#__PURE__*/_jsxDEV(Review, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 24\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(PaymentForm, {\n          cardState: cardState,\n          onCardInputChange: onCardInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 24\n        }, this);\n\n      default:\n        throw new Error('Unknown step');\n    }\n  };\n\n  const currentValidatoinSchema = validationSchema[activeStep];\n  const methods = useForm({\n    mode: 'all',\n    resolver: yupResolver(currentValidatoinSchema)\n  }); // use form hook\n\n  useEffect(() => {\n    agent.Account.fetchAddress().then(response => {\n      if (response) {\n        methods.reset({ ...methods.getValues(),\n          ...response,\n          saveAddress: false\n        });\n      }\n    });\n  }, [methods]);\n\n  const handleNext = async data => {\n    // const {nameOnCard,saveAddress,...shippingAddress}=data;\n    if (activeStep === steps.length - 1) {\n      // setLoading(true);\n      // try {\n      //     console.log(data);\n      //     const orderNumber =await agent.Orders.create({saveAddress,shippingAddress});\n      //     setOrderNumber(orderNumber);\n      //     setActiveStep(activeStep+1);\n      //     setLoading(false);\n      //     setTimeout(() => {\n      //         dispatch(clearBasket());\n      //     }, 3000);\n      // } catch (error) {\n      //     console.log(error);\n      //     setLoading(false);\n      // }\n      await submitOrder(data);\n    } else {\n      setActiveStep(activeStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const submitOrder = async data => {\n    setLoading(true);\n    const {\n      nameOnCard,\n      saveAddress,\n      ...shippingAddress\n    } = data;\n    if (!stripe || !elements) return; // stripe not ready\n\n    try {\n      var _paymentResult$paymen;\n\n      const cardElement = elements.getElement(CardNumberElement);\n      const paymentResult = await stripe.confirmCardPayment(basket === null || basket === void 0 ? void 0 : basket.clientSecret, {\n        payment_method: {\n          card: cardElement,\n          billing_details: {\n            name: nameOnCard\n          }\n        }\n      });\n\n      if (((_paymentResult$paymen = paymentResult.paymentIntent) === null || _paymentResult$paymen === void 0 ? void 0 : _paymentResult$paymen.status) === 'succeeded') {\n        const orderNumber = await agent.Orders.create({\n          saveAddress,\n          shippingAddress\n        });\n        setOrderNumber(orderNumber);\n        setPaymentSucceeded(true);\n        setPaymentMessage('Thank you - we have received your payment');\n        setActiveStep(activeStep + 1);\n        dispatch(clearBasket());\n        setLoading(false);\n      } else {\n        var _paymentResult$error;\n\n        setPaymentMessage((_paymentResult$error = paymentResult.error) === null || _paymentResult$error === void 0 ? void 0 : _paymentResult$error.message);\n        setPaymentSucceeded(false);\n        setLoading(false);\n        setActiveStep(activeStep + 1);\n      }\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  if (!basket || basket.items.length === 0) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"../\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 52\n  }, this);\n\n  const submitDisable = () => {\n    if (activeStep === steps.length - 1) {\n      return !cardComplete.cardNumber || !cardComplete.cardExpiry || !cardComplete.cardCvc || !methods.formState.isValid;\n    } else {\n      return !methods.formState.isValid;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormProvider, { ...methods,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"outlined\",\n        sx: {\n          mt: 10,\n          p: {\n            xs: 2,\n            md: 3\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h4\",\n          align: \"center\",\n          children: \"Checkout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Stepper, {\n          activeStep: activeStep,\n          sx: {\n            pt: 3,\n            pb: 5\n          },\n          children: steps.map(label => /*#__PURE__*/_jsxDEV(Step, {\n            children: /*#__PURE__*/_jsxDEV(StepLabel, {\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this)\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: activeStep === steps.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: paymentMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 33\n            }, this), paymentSucceeded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"subtitle1\",\n                children: [\"Your order number is #\", orderNumber, \". We have emailed your order confirmation, and will send you an update when your order has shipped.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: () => {\n                  history.push('../');\n                },\n                children: \"Go Home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleBack,\n              children: \"Go back and try again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: methods.handleSubmit(handleNext),\n            children: [getStepContent(activeStep), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'flex-end'\n              },\n              children: [activeStep !== 0 && /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleBack,\n                sx: {\n                  mt: 3,\n                  ml: 1\n                },\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n                loading: loading,\n                disabled: submitDisable(),\n                variant: \"contained\",\n                type: \"submit\",\n                sx: {\n                  mt: 3,\n                  ml: 1\n                },\n                children: activeStep === steps.length - 1 ? 'Place order' : 'Next'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckoutPage, \"0zv4dA7Enbg5FViImD9xP7/SHL4=\", false, function () {\n  return [useAppSelector, useAppDispatch, useStripe, useElements, useForm];\n});\n\n_c = CheckoutPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutPage\");","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/features/checkout/CheckoutPage.tsx"],"names":["Paper","Typography","Stepper","Step","StepLabel","Box","Button","Container","useEffect","useState","AddressForm","PaymentForm","Review","FormProvider","useForm","yupResolver","validationSchema","useAppDispatch","useAppSelector","agent","clearBasket","LoadingButton","Navigate","useStripe","useElements","CardNumberElement","history","steps","CheckoutPage","activeStep","setActiveStep","basket","state","orderNumber","setOrderNumber","loading","setLoading","dispatch","cardState","setCardState","elementError","cardComplete","setCardComplete","cardNumber","cardExpiry","cardCvc","paymentMessage","setPaymentMessage","paymentSucceeded","setPaymentSucceeded","stripe","elements","onCardInputChange","event","elementType","error","message","complete","getStepContent","step","Error","currentValidatoinSchema","methods","mode","resolver","Account","fetchAddress","then","response","reset","getValues","saveAddress","handleNext","data","length","submitOrder","handleBack","nameOnCard","shippingAddress","cardElement","getElement","paymentResult","confirmCardPayment","clientSecret","payment_method","card","billing_details","name","paymentIntent","status","Orders","create","console","log","items","submitDisable","formState","isValid","mt","p","xs","md","pt","pb","map","label","push","handleSubmit","display","justifyContent","ml"],"mappings":"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","sourcesContent":["\r\nimport { Paper, Typography, Stepper, Step, StepLabel, Box, Button, Container } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport AddressForm from \"./AddressForm\";\r\nimport PaymentForm from \"./PaymentForm\";\r\nimport Review from \"./Review\";\r\nimport { FieldValues, FormProvider, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\"\r\nimport { validationSchema } from \"./checkoutValidation\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/store/configureStore\";\r\nimport agent from \"../../app/api/agent\";\r\nimport { clearBasket } from \"../basket/basketSlice\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { StripeElementType } from \"@stripe/stripe-js\";\r\nimport { useStripe, useElements, CardNumberElement } from \"@stripe/react-stripe-js\";\r\nimport {history} from \"../..\"\r\n\r\nconst steps = ['Shipping address', 'Review your order', 'Payment details'];\r\n\r\n\r\n\r\nexport default function CheckoutPage() {\r\n  \r\n\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const {basket}=useAppSelector(state=>state.basket);\r\n\r\n    const [orderNumber, setOrderNumber] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch=useAppDispatch();\r\n\r\n    const [cardState,setCardState]=useState<{elementError:{[key in StripeElementType]?:string}}>({elementError:{}});\r\n  \r\n    const [cardComplete,setCardComplete]=useState<any>({cardNumber:false,cardExpiry:false,cardCvc:false});\r\n\r\n\r\n    const [paymentMessage, setPaymentMessage] = useState('');\r\n    const [paymentSucceeded, setPaymentSucceeded] = useState(false);\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    \r\n    const onCardInputChange=(event :any)=>{\r\n        setCardState({\r\n            ...cardState,\r\n            elementError:{\r\n                ...cardState.elementError,\r\n                [event.elementType]:event.error?.message\r\n            }\r\n        });\r\n        setCardComplete({...cardComplete,[event.elementType]:event.complete})\r\n    }\r\n\r\n\r\n    const getStepContent=(step: number)=> {\r\n        switch (step) {\r\n            case 0:\r\n                return <AddressForm />;\r\n            case 1: \r\n                return <Review />;\r\n            case 2:\r\n                return <PaymentForm cardState={cardState} onCardInputChange={onCardInputChange}  />;\r\n            default:\r\n                throw new Error('Unknown step');\r\n        }\r\n    }\r\n    const currentValidatoinSchema=validationSchema[activeStep];\r\n\r\n    const methods=useForm({\r\n\r\n        mode:'all',\r\n        resolver:yupResolver<any>(currentValidatoinSchema)\r\n            });// use form hook\r\n\r\n\r\n            useEffect(() => {\r\n             \r\n                agent.Account.fetchAddress()\r\n                .then(response=>{\r\n                    if(response){\r\n                        methods.reset({...methods.getValues(),...response,saveAddress:false})\r\n                    }\r\n                })\r\n            }, [methods])\r\n            \r\n\r\n    const handleNext = async (data:FieldValues) => {\r\n\r\n        // const {nameOnCard,saveAddress,...shippingAddress}=data;\r\n      if(activeStep===steps.length-1){\r\n\r\n        // setLoading(true);\r\n        // try {\r\n        //     console.log(data);\r\n\r\n        //     const orderNumber =await agent.Orders.create({saveAddress,shippingAddress});\r\n        //     setOrderNumber(orderNumber);\r\n        //     setActiveStep(activeStep+1);\r\n        //     setLoading(false);\r\n        //     setTimeout(() => {\r\n        //         dispatch(clearBasket());\r\n        //     }, 3000);\r\n\r\n\r\n\r\n        // } catch (error) {\r\n        //     console.log(error);\r\n\r\n        //     setLoading(false);\r\n\r\n        // }\r\n\r\n        await submitOrder(data);\r\n\r\n\r\n\r\n\r\n\r\n\r\n      }else\r\n      {\r\n        setActiveStep(activeStep + 1);\r\n\r\n\r\n      }\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep(activeStep - 1);\r\n    };\r\n\r\n    const submitOrder = async (data: FieldValues) => {\r\n        setLoading(true);\r\n        const { nameOnCard, saveAddress, ...shippingAddress } = data;\r\n        if (!stripe || !elements) return; // stripe not ready\r\n        try {\r\n            const cardElement = elements.getElement(CardNumberElement);\r\n            const paymentResult = await stripe.confirmCardPayment(basket?.clientSecret!, {\r\n                payment_method: {\r\n                    card: cardElement!,\r\n                    billing_details: {\r\n                        name: nameOnCard\r\n                    }\r\n                }\r\n            });            \r\n            if (paymentResult.paymentIntent?.status === 'succeeded') {\r\n                const orderNumber = await agent.Orders.create({ saveAddress, shippingAddress });\r\n                setOrderNumber(orderNumber);\r\n                setPaymentSucceeded(true);\r\n                setPaymentMessage('Thank you - we have received your payment');\r\n                setActiveStep(activeStep + 1);\r\n                dispatch(clearBasket());\r\n                setLoading(false);\r\n            } else {\r\n                setPaymentMessage(paymentResult.error?.message!);\r\n                setPaymentSucceeded(false);\r\n                setLoading(false);\r\n                setActiveStep(activeStep + 1);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n        if(!basket||basket.items.length===0)return <Navigate to=\"../\" />\r\n\r\n\r\n\r\n        const submitDisable=():boolean=>{\r\n            if(activeStep===steps.length-1){\r\n                return !cardComplete.cardNumber||\r\n                !cardComplete.cardExpiry||\r\n                !cardComplete.cardCvc||\r\n                !methods.formState.isValid\r\n\r\n            }else\r\n            {\r\n                return  !methods.formState.isValid\r\n            }\r\n\r\n        }\r\n   \r\n\r\n    return (\r\n\r\n      \r\n        <FormProvider {...methods} > \r\n                <Container maxWidth=\"lg\"> \r\n            <Paper variant=\"outlined\" sx={{ mt: 10, p: { xs: 2, md: 3 } }}>\r\n                <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                    Checkout\r\n                </Typography>\r\n                <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\r\n                    {steps.map((label) => (\r\n                        <Step key={label}>\r\n                            <StepLabel>{label}</StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper> \r\n                <>\r\n                    {activeStep === steps.length ? (\r\n                        \r\n                        <>\r\n                                <Typography variant=\"h5\" gutterBottom>\r\n                                    {paymentMessage}\r\n                                </Typography>\r\n                                {paymentSucceeded ? (\r\n                                    <>\r\n                                        <Typography gutterBottom variant=\"subtitle1\">\r\n                                            Your order number is #{orderNumber}. We have emailed your order\r\n                                            confirmation, and will send you an update when your order has\r\n                                            shipped.\r\n                                        </Typography>\r\n                                        <Button variant='contained' onClick={() => {\r\n                                            history.push('../')\r\n                                        }}>\r\n                                            Go Home\r\n                                        </Button>\r\n                                    </>\r\n                                ) : (\r\n                                    <Button variant='contained' onClick={handleBack}>\r\n                                        Go back and try again\r\n                                    </Button>\r\n                                )}\r\n                            </>\r\n\r\n\r\n                    ) : (\r\n                        <form onSubmit={methods.handleSubmit(handleNext)}>\r\n                            {getStepContent(activeStep)}\r\n                            <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                                {activeStep !== 0 && (\r\n                                    <Button onClick={handleBack} sx={{ mt: 3, ml: 1 }}>\r\n                                        Back\r\n                                    </Button>\r\n                                )}\r\n                                <LoadingButton\r\n                                loading={loading}\r\n                                    disabled={submitDisable()}\r\n\r\n                                    variant=\"contained\"\r\n                                   type=\"submit\"\r\n                                    sx={{ mt: 3, ml: 1 }}\r\n                                >\r\n                                    {activeStep === steps.length - 1 ? 'Place order' : 'Next'}\r\n                                </LoadingButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </>\r\n            </Paper> \r\n        </Container>\r\n        </FormProvider>\r\n\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}