{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport useForcedRerendering from '../utils/useForcedRerendering';\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://mui.com/base/react-select/hooks-api/#use-option)\n */\n\nexport default function useOption(params) {\n  const {\n    value,\n    optionRef: optionRefParam\n  } = params;\n  const selectContext = React.useContext(SelectUnstyledContext);\n\n  if (!selectContext) {\n    throw new Error('Option must have access to the SelectUnstyledContext (i.e., be used inside a SelectUnstyled component).');\n  }\n\n  const {\n    getOptionProps,\n    getOptionState,\n    listboxRef,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = selectContext;\n  const optionState = getOptionState(value);\n  const {\n    selected,\n    highlighted\n  } = optionState;\n  const rerender = useForcedRerendering();\n  React.useEffect(() => {\n    function updateSelectedState(selectedValues) {\n      if (!selected) {\n        if (Array.isArray(selectedValues)) {\n          if (selectedValues.includes(value)) {\n            rerender();\n          }\n        } else if (selectedValues === value) {\n          rerender();\n        }\n      } else if (Array.isArray(selectedValues)) {\n        if (!selectedValues.includes(value)) {\n          rerender();\n        }\n      } else if (selectedValues !== value) {\n        rerender();\n      }\n    }\n\n    return registerSelectionChangeHandler(updateSelectedState);\n  }, [registerSelectionChangeHandler, rerender, selected, value]);\n  React.useEffect(() => {\n    function updateHighlightedState(highlightedValue) {\n      if (highlightedValue === value && !highlighted) {\n        rerender();\n      } else if (highlightedValue !== value && highlighted) {\n        rerender();\n      }\n    }\n\n    return registerHighlightChangeHandler(updateHighlightedState);\n  }, [registerHighlightChangeHandler, rerender, value, highlighted]);\n  const optionRef = React.useRef(null);\n  const handleRef = useForkRef(optionRefParam, optionRef);\n  React.useEffect(() => {\n    // Scroll to the currently highlighted option\n    if (highlighted) {\n      if (!listboxRef.current || !optionRef.current) {\n        return;\n      }\n\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlighted, listboxRef]);\n  return {\n    getRootProps: function () {\n      let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({}, otherHandlers, getOptionProps(value, otherHandlers), {\n        ref: handleRef\n      });\n    },\n    highlighted,\n    index: optionState.index,\n    selected\n  };\n}","map":{"version":3,"sources":["D:/Ali/react/SouqApp/spa/node_modules/@mui/material/node_modules/@mui/base/useOption/useOption.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","SelectUnstyledContext","useForcedRerendering","useOption","params","value","optionRef","optionRefParam","selectContext","useContext","Error","getOptionProps","getOptionState","listboxRef","registerHighlightChangeHandler","registerSelectionChangeHandler","optionState","selected","highlighted","rerender","useEffect","updateSelectedState","selectedValues","Array","isArray","includes","updateHighlightedState","highlightedValue","useRef","handleRef","current","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getRootProps","otherHandlers","ref","index"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { SelectUnstyledContext } from '../SelectUnstyled/SelectUnstyledContext';\nimport useForcedRerendering from '../utils/useForcedRerendering';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://mui.com/base/react-select/hooks-api/#use-option)\n */\nexport default function useOption(params) {\n  const {\n    value,\n    optionRef: optionRefParam\n  } = params;\n  const selectContext = React.useContext(SelectUnstyledContext);\n  if (!selectContext) {\n    throw new Error('Option must have access to the SelectUnstyledContext (i.e., be used inside a SelectUnstyled component).');\n  }\n  const {\n    getOptionProps,\n    getOptionState,\n    listboxRef,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = selectContext;\n  const optionState = getOptionState(value);\n  const {\n    selected,\n    highlighted\n  } = optionState;\n  const rerender = useForcedRerendering();\n  React.useEffect(() => {\n    function updateSelectedState(selectedValues) {\n      if (!selected) {\n        if (Array.isArray(selectedValues)) {\n          if (selectedValues.includes(value)) {\n            rerender();\n          }\n        } else if (selectedValues === value) {\n          rerender();\n        }\n      } else if (Array.isArray(selectedValues)) {\n        if (!selectedValues.includes(value)) {\n          rerender();\n        }\n      } else if (selectedValues !== value) {\n        rerender();\n      }\n    }\n    return registerSelectionChangeHandler(updateSelectedState);\n  }, [registerSelectionChangeHandler, rerender, selected, value]);\n  React.useEffect(() => {\n    function updateHighlightedState(highlightedValue) {\n      if (highlightedValue === value && !highlighted) {\n        rerender();\n      } else if (highlightedValue !== value && highlighted) {\n        rerender();\n      }\n    }\n    return registerHighlightChangeHandler(updateHighlightedState);\n  }, [registerHighlightChangeHandler, rerender, value, highlighted]);\n  const optionRef = React.useRef(null);\n  const handleRef = useForkRef(optionRefParam, optionRef);\n  React.useEffect(() => {\n    // Scroll to the currently highlighted option\n    if (highlighted) {\n      if (!listboxRef.current || !optionRef.current) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlighted, listboxRef]);\n  return {\n    getRootProps: (otherHandlers = {}) => _extends({}, otherHandlers, getOptionProps(value, otherHandlers), {\n      ref: handleRef\n    }),\n    highlighted,\n    index: optionState.index,\n    selected\n  };\n}"]},"metadata":{},"sourceType":"module"}