{"ast":null,"code":"import{useEffect}from\"react\";import{useAppDispatch,useAppSelector}from\"../store/configureStore\";import{fetchProductsAsync,fetchfiltersAsync,productSelectors}from\"../../features/catalog/catalogSlice\";export default function useProducts(){var products=useAppSelector(productSelectors.selectAll);var dispatch=useAppDispatch();var _useAppSelector=useAppSelector(function(state){return state.catalog;}),productsLoaded=_useAppSelector.productsLoaded,filtersLoaded=_useAppSelector.filtersLoaded,brands=_useAppSelector.brands,types=_useAppSelector.types,paginationData=_useAppSelector.paginationData;useEffect(function(){// agent.Catalog.list()\n//     .then(products => setProducts(products))\n//     .catch(error => console.log(error))\n//     .finally(() => setLoading(false))\nif(!productsLoaded){dispatch(fetchProductsAsync());}},[productsLoaded,dispatch]);useEffect(function(){if(!filtersLoaded){dispatch(fetchfiltersAsync());}},[filtersLoaded,dispatch]);return{products:products,productsLoaded:productsLoaded,filtersLoaded:filtersLoaded,brands:brands,types:types,paginationData:paginationData};}","map":{"version":3,"sources":["D:/Learn/react/SouqApp/SPA/src/app/hooks/useProducts.tsx"],"names":["useEffect","useAppDispatch","useAppSelector","fetchProductsAsync","fetchfiltersAsync","productSelectors","useProducts","products","selectAll","dispatch","state","catalog","productsLoaded","filtersLoaded","brands","types","paginationData"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,yBAA/C,CACA,OAASC,kBAAT,CAA6BC,iBAA7B,CAAgDC,gBAAhD,KAAwE,qCAAxE,CAEA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CAClC,GAAMC,CAAAA,QAAQ,CAACL,cAAc,CAACG,gBAAgB,CAACG,SAAlB,CAA7B,CACA,GAAMC,CAAAA,QAAQ,CAACR,cAAc,EAA7B,CACA,oBAAiEC,cAAc,CAAC,SAAAQ,KAAK,QAAEA,CAAAA,KAAK,CAACC,OAAR,EAAN,CAA/E,CAAOC,cAAP,iBAAOA,cAAP,CAAsBC,aAAtB,iBAAsBA,aAAtB,CAAoCC,MAApC,iBAAoCA,MAApC,CAA2CC,KAA3C,iBAA2CA,KAA3C,CAAiDC,cAAjD,iBAAiDA,cAAjD,CAMAhB,SAAS,CAAC,UAAM,CAEZ;AACA;AACA;AACA;AAEA,GAAI,CAACY,cAAL,CAAqB,CACjBH,QAAQ,CAACN,kBAAkB,EAAnB,CAAR,CAEH,CAGJ,CAbQ,CAcH,CAACS,cAAD,CAAgBH,QAAhB,CAdG,CAAT,CAgBIT,SAAS,CAAC,UAAM,CAGZ,GAAI,CAACa,aAAL,CAAoB,CAChBJ,QAAQ,CAACL,iBAAiB,EAAlB,CAAR,CAEH,CAGJ,CATQ,CAUH,CAACS,aAAD,CAAeJ,QAAf,CAVG,CAAT,CAYA,MAAM,CACFF,QAAQ,CAARA,QADE,CACOK,cAAc,CAAdA,cADP,CACsBC,aAAa,CAAbA,aADtB,CACoCC,MAAM,CAANA,MADpC,CAC2CC,KAAK,CAALA,KAD3C,CACiDC,cAAc,CAAdA,cADjD,CAAN,CAGP","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/configureStore\";\r\nimport { fetchProductsAsync, fetchfiltersAsync, productSelectors } from \"../../features/catalog/catalogSlice\";\r\n\r\nexport default function useProducts() {\r\n    const products=useAppSelector(productSelectors.selectAll);\r\n    const dispatch=useAppDispatch();\r\n    const {productsLoaded,filtersLoaded,brands,types,paginationData}=useAppSelector(state=>state.catalog);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => { \r\n\r\n        // agent.Catalog.list()\r\n        //     .then(products => setProducts(products))\r\n        //     .catch(error => console.log(error))\r\n        //     .finally(() => setLoading(false))\r\n\r\n        if (!productsLoaded) {\r\n            dispatch(fetchProductsAsync())\r\n            \r\n        }\r\n\r\n\r\n    }\r\n        , [productsLoaded,dispatch])\r\n\r\n        useEffect(() => {\r\n\r\n           \r\n            if (!filtersLoaded) {\r\n                dispatch(fetchfiltersAsync())\r\n                \r\n            }\r\n    \r\n    \r\n        }\r\n            , [filtersLoaded,dispatch])\r\n\r\n        return{\r\n            products,productsLoaded,filtersLoaded,brands,types,paginationData\r\n        }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}