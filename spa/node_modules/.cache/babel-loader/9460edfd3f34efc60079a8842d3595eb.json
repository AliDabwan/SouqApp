{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\n\nconst sleep = () => new Promise(resolve => setTimeout(resolve, 500));\n\naxios.defaults.baseURL = 'http://localhost:5000/api/';\naxios.defaults.withCredentials = true;\naxios.interceptors.response.use(async response => {\n  await sleep();\n  return response;\n}, error => {\n  const {\n    data,\n    status\n  } = error.response;\n\n  switch (status) {\n    case 400:\n      if (data.errors) {\n        const modelStateErrors = [];\n\n        for (const key in data.errors) {\n          if (data.errors[key]) {\n            modelStateErrors.push(data.errors[key]);\n          }\n        }\n\n        throw modelStateErrors.flat();\n      }\n\n      toast.error(data.title);\n      break;\n\n    case 401:\n      toast.error(data.title);\n      break;\n\n    case 500:\n      history.push('server-error', {\n        error: data\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error.response);\n});\n\nconst responseBody = response => response.data;\n\nconst requests = {\n  get: (url, params) => axios.get(url, {\n    params: params\n  }).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  delete: url => axios.delete(url).then(responseBody)\n};\nconst Catalog = {\n  list: params => requests.get('products', params),\n  details: id => requests.get(`products/${id}`),\n  fetchFilters: () => requests.get('products/filters')\n};\nconst Errors = {\n  get400Error: () => requests.get('error/bad-request'),\n  get401Error: () => requests.get('error/unauthorized'),\n  get404Error: () => requests.get('error/not-found'),\n  getValidationError: () => requests.get('error/validation-error'),\n  get500Error: () => requests.get('error/server-error')\n};\nconst Basket = {\n  get: () => requests.get('basket'),\n  addItem: function (productId) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return requests.post(`basket?productId=${productId}&quantity=${quantity}`, {});\n  },\n  deleteItem: function (productId) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return requests.delete(`basket?productId=${productId}&quantity=${quantity}`);\n  }\n};\nconst agent = {\n  Catalog,\n  Errors,\n  Basket\n};\nexport default agent;","map":{"version":3,"sources":["D:/Learn/react/SouqApp/spa/src/app/api/agent.ts"],"names":["axios","toast","history","sleep","Promise","resolve","setTimeout","defaults","baseURL","withCredentials","interceptors","response","use","error","data","status","errors","modelStateErrors","key","push","flat","title","reject","responseBody","requests","get","url","params","then","post","body","put","delete","Catalog","list","details","id","fetchFilters","Errors","get400Error","get401Error","get404Error","getValidationError","get500Error","Basket","addItem","productId","quantity","deleteItem","agent"],"mappings":"AAAA,OAAOA,KAAP,MAAiD,OAAjD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;;AAEA,MAAMC,KAAK,GAAG,MAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAjC,CAApB;;AACAL,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAyB,4BAAzB;AACAR,KAAK,CAACO,QAAN,CAAeE,eAAf,GAA+B,IAA/B;AACAT,KAAK,CAACU,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,MAAMD,QAAN,IAAkB;AAC9C,QAAMR,KAAK,EAAX;AACA,SAAOQ,QAAP;AACH,CAHD,EAGIE,KAAD,IAAuB;AACtB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBF,KAAK,CAACF,QAA/B;;AACA,UAAQI,MAAR;AACI,SAAK,GAAL;AACI,UAAID,IAAI,CAACE,MAAT,EAAiB;AACb,cAAMC,gBAA0B,GAAG,EAAnC;;AACA,aAAK,MAAMC,GAAX,IAAkBJ,IAAI,CAACE,MAAvB,EAA+B;AAC3B,cAAIF,IAAI,CAACE,MAAL,CAAYE,GAAZ,CAAJ,EAAsB;AAClBD,YAAAA,gBAAgB,CAACE,IAAjB,CAAsBL,IAAI,CAACE,MAAL,CAAYE,GAAZ,CAAtB;AACH;AACJ;;AACD,cAAMD,gBAAgB,CAACG,IAAjB,EAAN;AACH;;AACDnB,MAAAA,KAAK,CAACY,KAAN,CAAYC,IAAI,CAACO,KAAjB;AACA;;AACJ,SAAK,GAAL;AACIpB,MAAAA,KAAK,CAACY,KAAN,CAAYC,IAAI,CAACO,KAAjB;AACA;;AACJ,SAAK,GAAL;AACInB,MAAAA,OAAO,CAACiB,IAAR,CAAa,cAAb,EAA6B;AAAEN,QAAAA,KAAK,EAAEC;AAAT,OAA7B;AACA;;AACJ;AACI;AApBR;;AAsBA,SAAOV,OAAO,CAACkB,MAAR,CAAeT,KAAK,CAACF,QAArB,CAAP;AACH,CA5BD;;AA6BA,MAAMY,YAAY,GAAIZ,QAAD,IAA6BA,QAAQ,CAACG,IAA3D;;AACA,MAAMU,QAAQ,GAAG;AACbC,EAAAA,GAAG,EAAE,CAACC,GAAD,EAAaC,MAAb,KAAyC3B,KAAK,CAACyB,GAAN,CAAUC,GAAV,EAAc;AAACC,IAAAA,MAAM,EAACA;AAAR,GAAd,EAA+BC,IAA/B,CAAoCL,YAApC,CADjC;AAEbM,EAAAA,IAAI,EAAE,CAACH,GAAD,EAAcI,IAAd,KAA2B9B,KAAK,CAAC6B,IAAN,CAAWH,GAAX,EAAgBI,IAAhB,EAAsBF,IAAtB,CAA2BL,YAA3B,CAFpB;AAGbQ,EAAAA,GAAG,EAAE,CAACL,GAAD,EAAcI,IAAd,KAA2B9B,KAAK,CAAC+B,GAAN,CAAUL,GAAV,EAAeI,IAAf,EAAqBF,IAArB,CAA0BL,YAA1B,CAHnB;AAIbS,EAAAA,MAAM,EAAGN,GAAD,IAAiB1B,KAAK,CAACgC,MAAN,CAAaN,GAAb,EAAkBE,IAAlB,CAAuBL,YAAvB;AAJZ,CAAjB;AAMA,MAAMU,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAGP,MAAD,IAA4BH,QAAQ,CAACC,GAAT,CAAa,UAAb,EAAwBE,MAAxB,CADtB;AAEZQ,EAAAA,OAAO,EAAGC,EAAD,IAAgBZ,QAAQ,CAACC,GAAT,CAAc,YAAWW,EAAG,EAA5B,CAFb;AAGZC,EAAAA,YAAY,EAAC,MAAIb,QAAQ,CAACC,GAAT,CAAa,kBAAb;AAHL,CAAhB;AAMA,MAAMa,MAAM,GAAG;AACXC,EAAAA,WAAW,EAAE,MAAMf,QAAQ,CAACC,GAAT,CAAa,mBAAb,CADR;AAEXe,EAAAA,WAAW,EAAE,MAAMhB,QAAQ,CAACC,GAAT,CAAa,oBAAb,CAFR;AAGXgB,EAAAA,WAAW,EAAE,MAAMjB,QAAQ,CAACC,GAAT,CAAa,iBAAb,CAHR;AAIXiB,EAAAA,kBAAkB,EAAE,MAAMlB,QAAQ,CAACC,GAAT,CAAa,wBAAb,CAJf;AAKXkB,EAAAA,WAAW,EAAE,MAAMnB,QAAQ,CAACC,GAAT,CAAa,oBAAb;AALR,CAAf;AAOA,MAAMmB,MAAM,GAAC;AACTnB,EAAAA,GAAG,EAAC,MAAID,QAAQ,CAACC,GAAT,CAAa,QAAb,CADC;AAEToB,EAAAA,OAAO,EAAC,UAACC,SAAD;AAAA,QAAkBC,QAAlB,uEAA2B,CAA3B;AAAA,WAA+BvB,QAAQ,CAACK,IAAT,CAAe,oBAAmBiB,SAAU,aAAYC,QAAS,EAAjE,EAAmE,EAAnE,CAA/B;AAAA,GAFC;AAGTC,EAAAA,UAAU,EAAC,UAACF,SAAD;AAAA,QAAkBC,QAAlB,uEAA2B,CAA3B;AAAA,WAA+BvB,QAAQ,CAACQ,MAAT,CAAiB,oBAAmBc,SAAU,aAAYC,QAAS,EAAnE,CAA/B;AAAA;AAHF,CAAb;AAMA,MAAME,KAAK,GAAG;AACVhB,EAAAA,OADU;AAEVK,EAAAA,MAFU;AAGVM,EAAAA;AAHU,CAAd;AAMA,eAAeK,KAAf","sourcesContent":["import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\n\r\nconst sleep = () => new Promise(resolve => setTimeout(resolve, 500));\r\naxios.defaults.baseURL = 'http://localhost:5000/api/';\r\naxios.defaults.withCredentials=true;\r\naxios.interceptors.response.use(async response => {\r\n    await sleep();\r\n    return response\r\n}, (error: AxiosError) => {\r\n    const { data, status } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (data.errors) {\r\n                const modelStateErrors: string[] = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modelStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat()\r\n            }\r\n            toast.error(data.title)\r\n            break;\r\n        case 401:\r\n            toast.error(data.title)\r\n            break;\r\n        case 500:\r\n            history.push('server-error', { error: data })\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return Promise.reject(error.response);\r\n})\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\nconst requests = {\r\n    get: (url: string,params?:URLSearchParams) => axios.get(url,{params:params}).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    delete: (url: string) => axios.delete(url).then(responseBody)\r\n}\r\nconst Catalog = {\r\n    list: (params:URLSearchParams) => requests.get('products',params),\r\n    details: (id: string) => requests.get(`products/${id}`),\r\n    fetchFilters:()=>requests.get('products/filters')\r\n}\r\n \r\nconst Errors = {\r\n    get400Error: () => requests.get('error/bad-request'),\r\n    get401Error: () => requests.get('error/unauthorized'),\r\n    get404Error: () => requests.get('error/not-found'),\r\n    getValidationError: () => requests.get('error/validation-error'),\r\n    get500Error: () => requests.get('error/server-error')\r\n}\r\nconst Basket={\r\n    get:()=>requests.get('basket'),\r\n    addItem:(productId:number,quantity=1)=>requests.post(`basket?productId=${productId}&quantity=${quantity}`,{}),\r\n    deleteItem:(productId:number,quantity=1)=>requests.delete(`basket?productId=${productId}&quantity=${quantity}`)\r\n}\r\n\r\nconst agent = {\r\n    Catalog,\r\n    Errors,\r\n    Basket\r\n}\r\n\r\nexport default agent;"]},"metadata":{},"sourceType":"module"}